<?xml version="1.0"?>
<ds:data-stream-collection xmlns:cat="urn:oasis:names:tc:entity:xmlns:xml:catalog" xmlns:cpe-dict="http://cpe.mitre.org/dictionary/2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:ds="http://scap.nist.gov/schema/scap/source/1.2" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:ind="http://oval.mitre.org/XMLSchema/oval-definitions-5#independent" xmlns:linux="http://oval.mitre.org/XMLSchema/oval-definitions-5#linux" xmlns:ocil="http://scap.nist.gov/schema/ocil/2.0" xmlns:oval="http://oval.mitre.org/XMLSchema/oval-common-5" xmlns:oval-def="http://oval.mitre.org/XMLSchema/oval-definitions-5" xmlns:unix="http://oval.mitre.org/XMLSchema/oval-definitions-5#unix" xmlns:xccdf-1.2="http://checklists.nist.gov/xccdf/1.2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="scap_org.open-scap_collection_from_xccdf_ssg-firefox-xccdf.xml" schematron-version="1.3">
  <ds:data-stream id="scap_org.open-scap_datastream_from_xccdf_ssg-firefox-xccdf.xml" scap-version="1.3" use-case="OTHER">
    <ds:dictionaries>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-cpe-dictionary.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-cpe-dictionary.xml">
        <cat:catalog>
          <cat:uri name="ssg-firefox-cpe-oval.xml" uri="#scap_org.open-scap_cref_ssg-firefox-cpe-oval.xml"/>
        </cat:catalog>
      </ds:component-ref>
    </ds:dictionaries>
    <ds:checklists>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-xccdf.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-xccdf.xml">
        <cat:catalog>
          <cat:uri name="ssg-firefox-oval.xml" uri="#scap_org.open-scap_cref_ssg-firefox-oval.xml"/>
          <cat:uri name="ssg-firefox-ocil.xml" uri="#scap_org.open-scap_cref_ssg-firefox-ocil.xml"/>
        </cat:catalog>
      </ds:component-ref>
    </ds:checklists>
    <ds:checks>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-oval.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-oval.xml"/>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-ocil.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-ocil.xml"/>
      <ds:component-ref id="scap_org.open-scap_cref_ssg-firefox-cpe-oval.xml" xlink:href="#scap_org.open-scap_comp_ssg-firefox-cpe-oval.xml"/>
    </ds:checks>
  </ds:data-stream>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-cpe-dictionary.xml" timestamp="2023-03-07T14:49:39">
    <cpe-dict:cpe-list xsi:schemaLocation="http://cpe.mitre.org/dictionary/2.0 http://cpe.mitre.org/files/cpe-dictionary_2.1.xsd">
      <cpe-dict:cpe-item name="cpe:/a:mozilla:firefox">
        <cpe-dict:title xml:lang="en-us">Mozilla Firefox</cpe-dict:title>
        <cpe-dict:check href="ssg-firefox-cpe-oval.xml" system="http://oval.mitre.org/XMLSchema/oval-definitions-5">oval:ssg-installed_app_is_firefox:def:1</cpe-dict:check>
      </cpe-dict:cpe-item>
    </cpe-dict:cpe-list>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-xccdf.xml" timestamp="2023-03-07T14:49:38">
    <xccdf-1.2:Benchmark id="xccdf_org.ssgproject.content_benchmark_FIREFOX" resolved="true" style="SCAP_1.2" xsi:schemaLocation="http://checklists.nist.gov/xccdf/1.2 xccdf-1.2.4.xsd" xml:lang="en-US">
      <xccdf-1.2:status date="2023-03-07">draft</xccdf-1.2:status>
      <xccdf-1.2:title>Guide to the Secure Configuration of Firefox</xccdf-1.2:title>
      <xccdf-1.2:description>This guide presents a catalog of security-relevant
configuration settings for Firefox. It is a rendering of
content structured in the eXtensible Configuration Checklist Description Format (XCCDF)
in order to support security automation.  The SCAP content is
is available in the <html:code>scap-security-guide</html:code> package which is developed at

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>.
<html:br/><html:br/>
Providing system administrators with such guidance informs them how to securely
configure systems under their control in a variety of network roles. Policy
makers and baseline creators can use this catalog of settings, with its
associated references to higher-level security control catalogs, in order to
assist them in security baseline creation. This guide is a <html:em>catalog, not a
checklist</html:em>, and satisfaction of every item is not likely to be possible or
sensible in many operational scenarios. However, the XCCDF format enables
granular selection and adjustment of settings, and their association with OVAL
and OCIL content provides an automated checking capability. Transformations of
this document, and its associated automated checking content, are capable of
providing baselines that meet a diverse set of policy objectives. Some example
XCCDF <html:em>Profiles</html:em>, which are selections of items that form checklists and
can be used as baselines, are available with this guide. They can be
processed, in an automated fashion, with tools that support the Security
Content Automation Protocol (SCAP). The DISA STIG for Firefox,
which provides required settings for US Department of Defense systems, is
one example of a baseline created from this guidance.
</xccdf-1.2:description>
      <xccdf-1.2:notice id="terms_of_use">Do not attempt to implement any of the settings in
this guide without first testing them in a non-operational environment. The
creators of this guidance assume no responsibility whatsoever for its use by
other parties, and makes no guarantees, expressed or implied, about its
quality, reliability, or any other characteristic.
</xccdf-1.2:notice>
      <xccdf-1.2:front-matter>The SCAP Security Guide Project<html:br/>

    <html:a href="https://www.open-scap.org/security-policies/scap-security-guide">https://www.open-scap.org/security-policies/scap-security-guide</html:a>
</xccdf-1.2:front-matter>
      <xccdf-1.2:rear-matter>Red Hat and Red Hat Enterprise Linux are either registered
trademarks or trademarks of Red Hat, Inc. in the United States and other
countries. All other names are registered trademarks or trademarks of their
respective companies.
</xccdf-1.2:rear-matter>
      <xccdf-1.2:platform idref="cpe:/a:mozilla:firefox"/>
      <xccdf-1.2:version update="https://github.com/ComplianceAsCode/content/releases/latest">0.1.66</xccdf-1.2:version>
      <xccdf-1.2:metadata>
        <dc:publisher>SCAP Security Guide Project</dc:publisher>
        <dc:creator>SCAP Security Guide Project</dc:creator>
        <dc:contributor>Frank J Cameron (CAM1244) &lt;cameron@ctc.com&gt;</dc:contributor>
        <dc:contributor>0x66656c6978 &lt;0x66656c6978@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>H&#xE5;vard F. Aasen &lt;havard.f.aasen@pfft.no&gt;</dc:contributor>
        <dc:contributor>Jack Adolph &lt;jack.adolph@gmail.com&gt;</dc:contributor>
        <dc:contributor>Edgar Aguilar &lt;edgar.aguilar@oracle.com&gt;</dc:contributor>
        <dc:contributor>Gabe Alford &lt;redhatrises@gmail.com&gt;</dc:contributor>
        <dc:contributor>Firas AlShafei &lt;firas.alshafei@us.abb.com&gt;</dc:contributor>
        <dc:contributor>Rodrigo Alvares &lt;ralvares@redhat.com&gt;</dc:contributor>
        <dc:contributor>Christopher Anderson &lt;cba@fedoraproject.org&gt;</dc:contributor>
        <dc:contributor>angystardust &lt;angystardust@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>anivan-suse &lt;anastasija.ivanovic@suse.com&gt;</dc:contributor>
        <dc:contributor>anixon-rh &lt;55244503+anixon-rh@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Ikko Ashimine &lt;eltociear@gmail.com&gt;</dc:contributor>
        <dc:contributor>Chuck Atkins &lt;chuck.atkins@kitware.com&gt;</dc:contributor>
        <dc:contributor>Bharath B &lt;bhb@redhat.com&gt;</dc:contributor>
        <dc:contributor>Ryan Ballanger &lt;root@rballang-admin-2.fastenal.com&gt;</dc:contributor>
        <dc:contributor>Alex Baranowski &lt;alex@euro-linux.com&gt;</dc:contributor>
        <dc:contributor>Eduardo Barretto &lt;eduardo.barretto@canonical.com&gt;</dc:contributor>
        <dc:contributor>Molly Jo Bault &lt;Molly.Jo.Bault@ballardtech.com&gt;</dc:contributor>
        <dc:contributor>Andrew Becker &lt;A-Beck@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Gabriel Becker &lt;ggasparb@redhat.com&gt;</dc:contributor>
        <dc:contributor>Alexander Bergmann &lt;abergmann@suse.com&gt;</dc:contributor>
        <dc:contributor>Dale Bewley &lt;dale@bewley.net&gt;</dc:contributor>
        <dc:contributor>Jose Luis BG &lt;bgjoseluis@gmail.com&gt;</dc:contributor>
        <dc:contributor>binyanling &lt;binyanling@uniontech.com&gt;</dc:contributor>
        <dc:contributor>Joseph Bisch &lt;joseph.bisch@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jeff Blank &lt;blank@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Olivier Bonhomme &lt;ptitoliv@ptitoliv.net&gt;</dc:contributor>
        <dc:contributor>Lance Bragstad &lt;lbragstad@gmail.com&gt;</dc:contributor>
        <dc:contributor>Ted Brunell &lt;tbrunell@redhat.com&gt;</dc:contributor>
        <dc:contributor>Marcus Burghardt &lt;maburgha@redhat.com&gt;</dc:contributor>
        <dc:contributor>Matthew Burket &lt;mburket@redhat.com&gt;</dc:contributor>
        <dc:contributor>Blake Burkhart &lt;blake.burkhart@us.af.mil&gt;</dc:contributor>
        <dc:contributor>Patrick Callahan &lt;pmc@patrickcallahan.com&gt;</dc:contributor>
        <dc:contributor>George Campbell &lt;gcampbell@palantir.com&gt;</dc:contributor>
        <dc:contributor>Nick Carboni &lt;ncarboni@redhat.com&gt;</dc:contributor>
        <dc:contributor>Carlos &lt;64919342+carlosmmatos@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>James Cassell &lt;james.cassell@ll.mit.edu&gt;</dc:contributor>
        <dc:contributor>Frank Caviggia &lt;fcaviggia@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Eric Christensen &lt;echriste@redhat.com&gt;</dc:contributor>
        <dc:contributor>Dan Clark &lt;danclark@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jayson Cofell &lt;1051437+70k10@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Caleb Cooper &lt;coopercd@ornl.gov&gt;</dc:contributor>
        <dc:contributor>Richard Maciel Costa &lt;richard.maciel.costa@canonical.com&gt;</dc:contributor>
        <dc:contributor>Xavier Coulon &lt;xavier.coulon@suse.com&gt;</dc:contributor>
        <dc:contributor>Deric Crago &lt;deric.crago@gmail.com&gt;</dc:contributor>
        <dc:contributor>crleekwc &lt;crleekwc@gmail.com&gt;</dc:contributor>
        <dc:contributor>cyarbrough76 &lt;42849651+cyarbrough76@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Maura Dailey &lt;maura@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Klaas Demter &lt;demter@atix.de&gt;</dc:contributor>
        <dc:contributor>denknorr &lt;dennis.knorr@suse.com&gt;</dc:contributor>
        <dc:contributor>dhanushkar-wso2 &lt;dhanushkar@wso2.com&gt;</dc:contributor>
        <dc:contributor>Andrew DiPrinzio &lt;andrew.diprinzio@jhuapl.edu&gt;</dc:contributor>
        <dc:contributor>dom &lt;dominique.blaze@devinci.fr&gt;</dc:contributor>
        <dc:contributor>Jean-Baptiste Donnette &lt;jean-baptiste.donnette@epita.fr&gt;</dc:contributor>
        <dc:contributor>Marco De Donno &lt;mdedonno1337@gmail.com&gt;</dc:contributor>
        <dc:contributor>dperrone &lt;dperrone@redhat.com&gt;</dc:contributor>
        <dc:contributor>drax &lt;applezip@gmail.com&gt;</dc:contributor>
        <dc:contributor>Sebastian Dunne &lt;sdunne@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fran&#xE7;ois Duthilleul &lt;francoisduthilleul@gmail.com&gt;</dc:contributor>
        <dc:contributor>Greg Elin &lt;gregelin@gitmachines.com&gt;</dc:contributor>
        <dc:contributor>eradot4027 &lt;jrtonmac@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alexis Facques &lt;alexis.facques@mythalesgroup.io&gt;</dc:contributor>
        <dc:contributor>Leah Fisher &lt;lfisher047@gmail.com&gt;</dc:contributor>
        <dc:contributor>Yavor Georgiev &lt;strandjata@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alijohn Ghassemlouei &lt;alijohn@secureagc.com&gt;</dc:contributor>
        <dc:contributor>Swarup Ghosh &lt;swghosh@redhat.com&gt;</dc:contributor>
        <dc:contributor>ghylock &lt;ghylock@gmail.com&gt;</dc:contributor>
        <dc:contributor>Andrew Gilmore &lt;agilmore2@gmail.com&gt;</dc:contributor>
        <dc:contributor>Joshua Glemza &lt;jglemza@nasa.gov&gt;</dc:contributor>
        <dc:contributor>Nick Gompper &lt;forestgomp@yahoo.com&gt;</dc:contributor>
        <dc:contributor>David Fernandez Gonzalez &lt;david.fernandezgonzalez@canonical.com&gt;</dc:contributor>
        <dc:contributor>Loren Gordon &lt;lorengordon@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Patrik Greco &lt;sikevux@sikevux.se&gt;</dc:contributor>
        <dc:contributor>Steve Grubb &lt;sgrubb@redhat.com&gt;</dc:contributor>
        <dc:contributor>guangyee &lt;gyee@suse.com&gt;</dc:contributor>
        <dc:contributor>Christian Hagenest &lt;christian.hagenest@suse.com&gt;</dc:contributor>
        <dc:contributor>Marek Haicman &lt;mhaicman@redhat.com&gt;</dc:contributor>
        <dc:contributor>Vern Hart &lt;vern.hart@canonical.com&gt;</dc:contributor>
        <dc:contributor>Alex Haydock &lt;alex@alexhaydock.co.uk&gt;</dc:contributor>
        <dc:contributor>Rebekah Hayes &lt;rhayes@corp.rivierautilities.com&gt;</dc:contributor>
        <dc:contributor>Trey Henefield &lt;thenefield@gmail.com&gt;</dc:contributor>
        <dc:contributor>Henning Henkel &lt;henning.henkel@helvetia.ch&gt;</dc:contributor>
        <dc:contributor>hex2a &lt;hex2a@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>John Hooks &lt;jhooks@starscream.pa.jhbcomputers.com&gt;</dc:contributor>
        <dc:contributor>Jakub Hrozek &lt;jhrozek@redhat.com&gt;</dc:contributor>
        <dc:contributor>De Huo &lt;De.Huo@windriver.com&gt;</dc:contributor>
        <dc:contributor>Robin Price II &lt;robin@redhat.com&gt;</dc:contributor>
        <dc:contributor>Yasir Imam &lt;yimam@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jiri Jaburek &lt;jjaburek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Keith Jackson &lt;keithkjackson@gmail.com&gt;</dc:contributor>
        <dc:contributor>Marc Jadoul &lt;mgjadoul@laptomatic.auth-o-matic.corp&gt;</dc:contributor>
        <dc:contributor>Jeremiah Jahn &lt;jeremiah@goodinassociates.com&gt;</dc:contributor>
        <dc:contributor>Jakub Jelen &lt;jjelen@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jessicahfy &lt;Jessicahfy@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Stephan Joerrens &lt;Stephan.Joerrens@fiduciagad.de&gt;</dc:contributor>
        <dc:contributor>Hunter Jones &lt;hjones2199@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jono &lt;jono@ubuntu-18.localdomain&gt;</dc:contributor>
        <dc:contributor>justchris1 &lt;justchris1@justchris1.email&gt;</dc:contributor>
        <dc:contributor>Kai Kang &lt;kai.kang@windriver.com&gt;</dc:contributor>
        <dc:contributor>Charles Kernstock &lt;charles.kernstock@ultra-ats.com&gt;</dc:contributor>
        <dc:contributor>Yuli Khodorkovskiy &lt;ykhodorkovskiy@tresys.com&gt;</dc:contributor>
        <dc:contributor>Sherine Khoury &lt;skhoury@redhat.com&gt;</dc:contributor>
        <dc:contributor>Nathan Kinder &lt;nkinder@redhat.com&gt;</dc:contributor>
        <dc:contributor>Lee Kinser &lt;lee.kinser@gmail.com&gt;</dc:contributor>
        <dc:contributor>Evgeny Kolesnikov &lt;ekolesni@redhat.com&gt;</dc:contributor>
        <dc:contributor>Peter 'Pessoft' Kol&#xED;nek &lt;github@pessoft.com&gt;</dc:contributor>
        <dc:contributor>Luke Kordell &lt;luke.t.kordell@lmco.com&gt;</dc:contributor>
        <dc:contributor>Malte Kraus &lt;malte.kraus@suse.com&gt;</dc:contributor>
        <dc:contributor>Seth Kress &lt;seth.kress@dsainc.com&gt;</dc:contributor>
        <dc:contributor>Felix Krohn &lt;felix.krohn@helvetia.ch&gt;</dc:contributor>
        <dc:contributor>kspargur &lt;kspargur@kspargur.csb&gt;</dc:contributor>
        <dc:contributor>Amit Kumar &lt;amitkuma@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fen Labalme &lt;fen@civicactions.com&gt;</dc:contributor>
        <dc:contributor>Ade Lee &lt;alee@redhat.com&gt;</dc:contributor>
        <dc:contributor>Christopher Lee &lt;Crleekwc@gmail.com&gt;</dc:contributor>
        <dc:contributor>Ian Lee &lt;lee1001@llnl.gov&gt;</dc:contributor>
        <dc:contributor>Jarrett Lee &lt;jarrettl@umd.edu&gt;</dc:contributor>
        <dc:contributor>Joseph Lenox &lt;joseph.lenox@collins.com&gt;</dc:contributor>
        <dc:contributor>Jan Lieskovsky &lt;jlieskov@redhat.com&gt;</dc:contributor>
        <dc:contributor>Markus Linnala &lt;Markus.Linnala@knowit.fi&gt;</dc:contributor>
        <dc:contributor>Flos Lonicerae &lt;lonicerae@gmail.com&gt;</dc:contributor>
        <dc:contributor>Simon Lukasik &lt;slukasik@redhat.com&gt;</dc:contributor>
        <dc:contributor>Milan Lysonek &lt;mlysonek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Fredrik Lys&#xE9;n &lt;fredrik@pipemore.se&gt;</dc:contributor>
        <dc:contributor>Caitlin Macleod &lt;caitelatte@gmail.com&gt;</dc:contributor>
        <dc:contributor>Nick Maludy &lt;nmaludy@gmail.com&gt;</dc:contributor>
        <dc:contributor>Lokesh Mandvekar &lt;lsm5@fedoraproject.org&gt;</dc:contributor>
        <dc:contributor>Matus Marhefka &lt;mmarhefk@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jamie Lorwey Martin &lt;jlmartin@redhat.com&gt;</dc:contributor>
        <dc:contributor>Carlos Matos &lt;cmatos@redhat.com&gt;</dc:contributor>
        <dc:contributor>Robert McAllister &lt;rmcallis@redhat.com&gt;</dc:contributor>
        <dc:contributor>Karen McCarron &lt;kmccarro@redhat.com&gt;</dc:contributor>
        <dc:contributor>Michael McConachie &lt;michael@redhat.com&gt;</dc:contributor>
        <dc:contributor>Marcus Meissner &lt;meissner@suse.de&gt;</dc:contributor>
        <dc:contributor>Khary Mendez &lt;kmendez@redhat.com&gt;</dc:contributor>
        <dc:contributor>Rodney Mercer &lt;rmercer@harris.com&gt;</dc:contributor>
        <dc:contributor>Matt Micene &lt;nzwulfin@gmail.com&gt;</dc:contributor>
        <dc:contributor>Brian Millett &lt;bmillett@gmail.com&gt;</dc:contributor>
        <dc:contributor>Takuya Mishina &lt;tmishina@jp.ibm.com&gt;</dc:contributor>
        <dc:contributor>Mixer9 &lt;35545791+Mixer9@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>mmosel &lt;mmosel@kde.example.com&gt;</dc:contributor>
        <dc:contributor>Zbynek Moravec &lt;zmoravec@redhat.com&gt;</dc:contributor>
        <dc:contributor>Kazuo Moriwaka &lt;moriwaka@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Michael Moseley &lt;michael@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Renaud M&#xE9;trich &lt;rmetrich@redhat.com&gt;</dc:contributor>
        <dc:contributor>Joe Nall &lt;joe@nall.com&gt;</dc:contributor>
        <dc:contributor>Neiloy &lt;neiloy@redhat.com&gt;</dc:contributor>
        <dc:contributor>Axel Nennker &lt;axel@nennker.de&gt;</dc:contributor>
        <dc:contributor>Michele Newman &lt;mnewman@redhat.com&gt;</dc:contributor>
        <dc:contributor>Sean O'Keeffe &lt;seanokeeffe797@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jiri Odehnal &lt;jodehnal@redhat.com&gt;</dc:contributor>
        <dc:contributor>Ilya Okomin &lt;ilya.okomin@oracle.com&gt;</dc:contributor>
        <dc:contributor>Kaustubh Padegaonkar &lt;theTuxRacer@gmail.com&gt;</dc:contributor>
        <dc:contributor>Michael Palmiotto &lt;mpalmiotto@tresys.com&gt;</dc:contributor>
        <dc:contributor>Eryx Paredes &lt;eryxp@lyft.com&gt;</dc:contributor>
        <dc:contributor>Max R.D. Parmer &lt;maxp@trystero.is&gt;</dc:contributor>
        <dc:contributor>Arnaud Patard &lt;apatard@hupstream.com&gt;</dc:contributor>
        <dc:contributor>Jan Pazdziora &lt;jpazdziora@redhat.com&gt;</dc:contributor>
        <dc:contributor>pcactr &lt;paul.c.arnold4.ctr@mail.mil&gt;</dc:contributor>
        <dc:contributor>Kenneth Peeples &lt;kennethwpeeples@gmail.com&gt;</dc:contributor>
        <dc:contributor>Nathan Peters &lt;Nathaniel.Peters@ca.com&gt;</dc:contributor>
        <dc:contributor>Frank Lin PIAT &lt;fpiat@klabs.be&gt;</dc:contributor>
        <dc:contributor>Stefan Pietsch &lt;mail.ipv4v6+gh@gmail.com&gt;</dc:contributor>
        <dc:contributor>piggyvenus &lt;piggyvenus@gmail.com&gt;</dc:contributor>
        <dc:contributor>Vojtech Polasek &lt;vpolasek@redhat.com&gt;</dc:contributor>
        <dc:contributor>Orion Poplawski &lt;orion@nwra.com&gt;</dc:contributor>
        <dc:contributor>Nick Poyant &lt;npoyant@redhat.com&gt;</dc:contributor>
        <dc:contributor>Martin Preisler &lt;mpreisle@redhat.com&gt;</dc:contributor>
        <dc:contributor>Wesley Ceraso Prudencio &lt;wcerasop@redhat.com&gt;</dc:contributor>
        <dc:contributor>Raphael Sanchez Prudencio &lt;rsprudencio@redhat.com&gt;</dc:contributor>
        <dc:contributor>T.O. Radzy Radzykewycz &lt;radzy@windriver.com&gt;</dc:contributor>
        <dc:contributor>Kenyon Ralph &lt;kenyon@kenyonralph.com&gt;</dc:contributor>
        <dc:contributor>Mike Ralph &lt;mralph@redhat.com&gt;</dc:contributor>
        <dc:contributor>Federico Ramirez &lt;federico.r.ramirez@oracle.com&gt;</dc:contributor>
        <dc:contributor>rchikov &lt;rumen.chikov@suse.com&gt;</dc:contributor>
        <dc:contributor>Rick Renshaw &lt;Richard_Renshaw@xtoenergy.com&gt;</dc:contributor>
        <dc:contributor>Chris Reynolds &lt;c.reynolds82@gmail.com&gt;</dc:contributor>
        <dc:contributor>rhayes &lt;rhayes@rivierautilities.com&gt;</dc:contributor>
        <dc:contributor>Pat Riehecky &lt;riehecky@fnal.gov&gt;</dc:contributor>
        <dc:contributor>rlucente-se-jboss &lt;rlucente@redhat.com&gt;</dc:contributor>
        <dc:contributor>Juan Antonio Osorio Robles &lt;juan.osoriorobles@eu.equinix.com&gt;</dc:contributor>
        <dc:contributor>Matt Rogers &lt;mrogers@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jesse Roland &lt;jesse.roland@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>Joshua Roys &lt;roysjosh@gmail.com&gt;</dc:contributor>
        <dc:contributor>rrenshaw &lt;bofh69@yahoo.com&gt;</dc:contributor>
        <dc:contributor>Chris Ruffalo &lt;chris.ruffalo@gmail.com&gt;</dc:contributor>
        <dc:contributor>rumch-se &lt;77793453+rumch-se@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Ray Shaw (Cont ARL/CISD) rvshaw &lt;rvshaw@esme.arl.army.mil&gt;</dc:contributor>
        <dc:contributor>Earl Sampson &lt;ESampson@suse.com&gt;</dc:contributor>
        <dc:contributor>sampsone &lt;esampson@suse.com&gt;</dc:contributor>
        <dc:contributor>Willy Santos &lt;wsantos@redhat.com&gt;</dc:contributor>
        <dc:contributor>Nagarjuna Sarvepalli &lt;snagarju@redhat.com&gt;</dc:contributor>
        <dc:contributor>Anderson Sasaki &lt;33833274+ansasaki@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Gautam Satish &lt;gautams@hpe.com&gt;</dc:contributor>
        <dc:contributor>Watson Sato &lt;wsato@redhat.com&gt;</dc:contributor>
        <dc:contributor>Satoru SATOH &lt;satoru.satoh@gmail.com&gt;</dc:contributor>
        <dc:contributor>Alexander Scheel &lt;alexander.m.scheel@gmail.com&gt;</dc:contributor>
        <dc:contributor>Bryan Schneiders &lt;pschneiders@trisept.com&gt;</dc:contributor>
        <dc:contributor>shaneboulden &lt;shane.boulden@gmail.com&gt;</dc:contributor>
        <dc:contributor>Vincent Shen &lt;wenshen@redhat.com&gt;</dc:contributor>
        <dc:contributor>Dhriti Shikhar &lt;dhriti.shikhar.rokz@gmail.com&gt;</dc:contributor>
        <dc:contributor>Spencer Shimko &lt;sshimko@tresys.com&gt;</dc:contributor>
        <dc:contributor>Mark Shoger &lt;mshoger@redhat.com&gt;</dc:contributor>
        <dc:contributor>THOBY Simon &lt;Simon.THOBY@viveris.fr&gt;</dc:contributor>
        <dc:contributor>Thomas Sj&#xF6;gren &lt;konstruktoid@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Jindrich Skacel &lt;102800748+jskacel@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Francisco Slavin &lt;fslavin@tresys.com&gt;</dc:contributor>
        <dc:contributor>Dave Smith &lt;dsmith@eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>David Smith &lt;dsmith@fornax.eclipse.ncsc.mil&gt;</dc:contributor>
        <dc:contributor>Kevin Spargur &lt;kspargur@redhat.com&gt;</dc:contributor>
        <dc:contributor>Kenneth Stailey &lt;kstailey.lists@gmail.com&gt;</dc:contributor>
        <dc:contributor>Leland Steinke &lt;leland.j.steinke.ctr@mail.mil&gt;</dc:contributor>
        <dc:contributor>Justin Stephenson &lt;jstephen@redhat.com&gt;</dc:contributor>
        <dc:contributor>Brian Stinson &lt;brian@bstinson.com&gt;</dc:contributor>
        <dc:contributor>Jake Stookey &lt;jakestookey@gmail.com&gt;</dc:contributor>
        <dc:contributor>Jonathan Sturges &lt;jsturges@redhat.com&gt;</dc:contributor>
        <dc:contributor>teacup-on-rockingchair &lt;315160+teacup-on-rockingchair@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Ian Tewksbury &lt;itewk@redhat.com&gt;</dc:contributor>
        <dc:contributor>Philippe Thierry &lt;phil@reseau-libre.net&gt;</dc:contributor>
        <dc:contributor>Simon THOBY &lt;git@nightmared.fr&gt;</dc:contributor>
        <dc:contributor>Derek Thurston &lt;thegrit@gmail.com&gt;</dc:contributor>
        <dc:contributor>tianzhenjia &lt;jiatianzhen@cmss.chinamobile.com&gt;</dc:contributor>
        <dc:contributor>Greg Tinsley &lt;gtinsley@redhat.com&gt;</dc:contributor>
        <dc:contributor>Paul Tittle &lt;ptittle@cmf.nrl.navy.mil&gt;</dc:contributor>
        <dc:contributor>tom &lt;tom@localhost.localdomain&gt;</dc:contributor>
        <dc:contributor>tomas.hudik &lt;tomas.hudik@embedit.cz&gt;</dc:contributor>
        <dc:contributor>Jeb Trayer &lt;jeb.d.trayer@uscg.mil&gt;</dc:contributor>
        <dc:contributor>TrilokGeer &lt;tgeer@redhat.com&gt;</dc:contributor>
        <dc:contributor>Viktors Trubovics &lt;viktors.trubovics@suse.com&gt;</dc:contributor>
        <dc:contributor>Nico Truzzolino &lt;nico.truzzolino@gmx.de&gt;</dc:contributor>
        <dc:contributor>Brian Turek &lt;brian.turek@gmail.com&gt;</dc:contributor>
        <dc:contributor>Mat&#x11B;j T&#xFD;&#x10D; &lt;matyc@redhat.com&gt;</dc:contributor>
        <dc:contributor>VadimDor &lt;29509093+VadimDor@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Trevor Vaughan &lt;tvaughan@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>vtrubovics &lt;82443408+vtrubovics@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Samuel Warren &lt;swarren@redhat.com&gt;</dc:contributor>
        <dc:contributor>wcushen &lt;54533890+wcushen@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Shawn Wells &lt;shawn@shawndwells.io&gt;</dc:contributor>
        <dc:contributor>Daniel E. White &lt;linuxdan@users.noreply.github.com&gt;</dc:contributor>
        <dc:contributor>Bernhard M. Wiedemann &lt;bwiedemann@suse.de&gt;</dc:contributor>
        <dc:contributor>Roy Williams &lt;roywilli@roywilli.redhat.com&gt;</dc:contributor>
        <dc:contributor>Willumpie &lt;willumpie@xs4all.nl&gt;</dc:contributor>
        <dc:contributor>Rob Wilmoth &lt;rwilmoth@redhat.com&gt;</dc:contributor>
        <dc:contributor>win97pro &lt;win97pro@protonmail.com&gt;</dc:contributor>
        <dc:contributor>Lucas Yamanishi &lt;lucas.yamanishi@onyxpoint.com&gt;</dc:contributor>
        <dc:contributor>Xirui Yang &lt;xirui.yang@oracle.com&gt;</dc:contributor>
        <dc:contributor>yarunachalam &lt;yarunachalam@suse.com&gt;</dc:contributor>
        <dc:contributor>Guang Yee &lt;guang.yee@suse.com&gt;</dc:contributor>
        <dc:contributor>Achilleas John Yfantis &lt;ayfantis@redhat.com&gt;</dc:contributor>
        <dc:contributor>YiLin.Li &lt;YiLin.Li@linux.alibaba.com&gt;</dc:contributor>
        <dc:contributor>YuQing &lt;yyq0391@163.com&gt;</dc:contributor>
        <dc:contributor>Kevin Zimmerman &lt;kevin.zimmerman@kitware.com&gt;</dc:contributor>
        <dc:contributor>Luigi Mario Zuccarelli &lt;luzuccar@redhat.com&gt;</dc:contributor>
        <dc:contributor>Jan &#x10C;ern&#xFD; &lt;jcerny@redhat.com&gt;</dc:contributor>
        <dc:contributor>Michal &#x160;ruba&#x159; &lt;msrubar@redhat.com&gt;</dc:contributor>
        <dc:source>https://github.com/ComplianceAsCode/content/releases/latest</dc:source>
      </xccdf-1.2:metadata>
      <xccdf-1.2:Profile id="xccdf_org.ssgproject.content_profile_stig">
        <xccdf-1.2:title override="true">Mozilla Firefox STIG</xccdf-1.2:title>
        <xccdf-1.2:description override="true">This profile is developed under the DoD consensus model and DISA FSO Vendor STIG process,
serving as the upstream development environment for the Firefox STIG.

As a result of the upstream/downstream relationship between the SCAP Security Guide project
and the official DISA FSO STIG baseline, users should expect variance between SSG and DISA FSO content.
For official DISA FSO STIG content, refer to https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=app-security%2Cbrowser-guidance.

While this profile is packaged by Red Hat as part of the SCAP Security Guide package, please note
that commercial support of this SCAP content is NOT available. This profile is provided as example
SCAP content with no endorsement for suitability or production readiness. Support for this
profile is provided by the upstream SCAP Security Guide community on a best-effort basis. The
upstream project homepage is https://www.open-scap.org/security-policies/scap-security-guide/.</xccdf-1.2:description>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-addons_permission" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-autoplay_video" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-cryptomining" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-development_tools" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_deprecated_ciphers" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_form_history" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_pocket" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-disable_studies" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-dns_over_https" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-encrypted_media_extensions" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-enhanced_tracking" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-extension_recommendation" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-extension_update" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-feedback_reporting" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-fingerprinting_protection" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-forget_button" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_changes" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_resizing" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-network_prediction" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-no_sanitize_on_shutdown" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-nonessential_capabilities" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-password_manager" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-pop-up_windows" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-private_browsing" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-search_suggestion" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-search_update" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-ssl_minimum_version" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-sync" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-telemetry" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-user_messaging" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_policy-verification" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" selected="true"/>
        <xccdf-1.2:select idref="xccdf_org.ssgproject.content_group_firefox_preferences-dod_root_certificate" selected="false"/>
        <xccdf-1.2:refine-value idref="xccdf_org.ssgproject.content_value_var_default_home_page" selector="about_blank"/>
      </xccdf-1.2:Profile>
      <xccdf-1.2:Group id="xccdf_org.ssgproject.content_group_firefox">
        <xccdf-1.2:title>Firefox</xccdf-1.2:title>
        <xccdf-1.2:description>Firefox is an open-source web browser and developed by Mozilla.
Web browsers such as Firefox are used for a number of reasons. This section
provides settings for configuring Firefox policies to meet compliance
settings for Firefox running on Red Hat Enterprise Linux systems.

<html:ul>Refer to <html:li><html:a href="http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries">http://kb.mozillazine.org/Firefox_:_FAQs_:_About:config_Entries</html:a></html:li>
for a list of currently supported Firefox settings.</html:ul></xccdf-1.2:description>
        <xccdf-1.2:Value id="xccdf_org.ssgproject.content_value_var_required_file_types" type="string">
          <xccdf-1.2:title>The Default Required Firefox File Types</xccdf-1.2:title>
          <xccdf-1.2:description>The default required file types that need to request usage
confirmation in Firefox.</xccdf-1.2:description>
          <xccdf-1.2:value>application/pdf,application/fdf,application/xfdf,application/lsl,application/lso,application/lss,application/iqy,application/rqy,application/xlk,application/xls,application/xlt,application/pot,application/pps,application/ppt,application/dos,application/dot,application/wks,application/bat,application/ps,application/eps,application/wch,application/wcm,application/wb1,application/wb3,application/rtf,application/doc,application/mdb,application/mde,application/wbk,application/ad,application/adp</xccdf-1.2:value>
        </xccdf-1.2:Value>
        <xccdf-1.2:Value id="xccdf_org.ssgproject.content_value_var_default_home_page" type="string">
          <xccdf-1.2:title>The Default Firefox Home Page</xccdf-1.2:title>
          <xccdf-1.2:description>The default home page for Firefox users.</xccdf-1.2:description>
          <xccdf-1.2:value>None</xccdf-1.2:value>
          <xccdf-1.2:value selector="about_blank">about:blank</xccdf-1.2:value>
        </xccdf-1.2:Value>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-addons_permission" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured to disable the installation of extensions.</xccdf-1.2:title>
          <xccdf-1.2:description>Addon installation may be disabled in an administrative policy by setting
the <html:code>InstallAddonsPermission</html:code> key under <html:code>policies</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000013</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>A browser extension is a program that has been installed into the browser to add functionality. Where a plug-in interacts only with a web page and usually a third-party external application (e.g., Flash, Adobe Reader), an extension interacts with the browser program itself. Extensions are not embedded in web pages and must be downloaded and installed in order to work. Extensions allow browsers to avoid restrictions that apply to web pages.
For example, an extension can be written to combine data from multiple domains and present it when a certain page is accessed, which can be considered cross-site scripting. If a browser is configured to allow unrestricted use of extensions, plug-ins can be loaded and installed from malicious sources and used on the browser.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-addons_permission" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'InstallAddonsPermission' in _tree['policies']:
   pass
else:
   _tree['policies']['InstallAddonsPermission'] = dict()

_tree['policies']['InstallAddonsPermission']['Default'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-addons_permission:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-autoplay_video" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox autoplay must be disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>Audio/Video autoplay may be disabled in an administrative policy by setting
the <html:code>Default</html:code> key under <html:code>Permissions</html:code>, <html:code>Autoplay</html:code> to <html:code>"block-audio-video"</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000021</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Autoplay allows the user to control whether videos can play automatically (without user consent) with audio content. The user must be able to select content that is run within the browser window.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-autoplay_video" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Permissions' in _tree['policies']:
   pass
else:
   _tree['policies']['Permissions'] = dict()

if 'Autoplay' in _tree['policies']['Permissions']:
   pass
else:
   _tree['policies']['Permissions']['Autoplay'] = dict()

_tree['policies']['Permissions']['Autoplay']['Default'] = 'block-audio-video'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-autoplay_video:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-autoplay_video_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-cryptomining" selected="false" severity="medium">
          <xccdf-1.2:title>Enabled Firefox Cryptomining protection</xccdf-1.2:title>
          <xccdf-1.2:description>Cryptomining protection may be enabled by setting
<html:code>privacy.trackingprotection.cryptomining.enabled</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000024</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Content Blocking/Tracking Protection feature stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the tracker lists you set Firefox to use, then the fingerprinting script (or other tracking script/image) will not be loaded from that site.
Cryptomining scripts use your computer&#x2019;s central processing unit (CPU) to invisibly mine cryptocurrency.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-cryptomining" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'EnableTrackingProtection' in _tree['policies']:
   pass
else:
   _tree['policies']['EnableTrackingProtection'] = dict()

_tree['policies']['EnableTrackingProtection']['Cryptomining'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-cryptomining:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-cryptomining_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-development_tools" selected="false" severity="low">
          <xccdf-1.2:title>Disable Firefox Development Tools</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox provides development tools which identify detailed information 
about the browser and its configuration. These details are often also 
recorded into a log file, giving an attacker the ability to capture 
detailed information about the system.
This can be disabled by setting <html:code>DisableDeveloperTools</html:code> to
<html:code>true</html:code> in <html:code>policies.json</html:code></xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000015</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001312</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-11 b</xccdf-1.2:reference>
          <xccdf-1.2:rationale>In order to protect privacy and sensitive data, Mozilla provides
the ability to configure Firefox so that development tools are prevented from being used.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-development_tools" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableDeveloperTools'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-development_tools:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-development_tools_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_deprecated_ciphers" selected="false" severity="medium">
          <xccdf-1.2:title>Disable Firefox deprecated ciphers</xccdf-1.2:title>
          <xccdf-1.2:description>Pocket may be disabled by setting
<html:code>TLS_RSA_WITH_3DES_EDE_CBC_SHA</html:code> to <html:code>true</html:code> under <html:code>DisabledCiphers</html:code>
in the policies file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000027</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Weak ciphers are encryption/decryption algorithms that use keys of insufficient length. Using an insufficient length for a key increases
the probability that the encryption scheme could be broken.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-disable_deprecated_ciphers" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'DisabledCiphers' in _tree['policies']:
   pass
else:
   _tree['policies']['DisabledCiphers'] = dict()

_tree['policies']['DisabledCiphers']['TLS_RSA_WITH_3DES_EDE_CBC_SHA'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-disable_deprecated_ciphers:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-disable_deprecated_ciphers_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_form_history" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured to disable form fill assistance.</xccdf-1.2:title>
          <xccdf-1.2:description>The update check may be disabled in an administrative policy by setting
the <html:code>DisableFormHistory</html:code> key under <html:code>policies</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000007</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>To protect privacy and sensitive data, Firefox provides the ability to configure the program so that data entered into forms is not saved. This mitigates the risk of a website gleaning private information from prefilled information.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-disable_form_history" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFormHistory'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-disable_form_history:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_pocket" selected="false" severity="medium">
          <xccdf-1.2:title>Disable Firefox Pocket</xccdf-1.2:title>
          <xccdf-1.2:description>Pocket may be disabled by setting
<html:code>DisablePocket</html:code> to <html:code>true</html:code>
in the policies file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000038</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Pocket is a social bookmarking service for storing, sharing, and discovering web bookmarks.
Data gathering cloud services such as Pocket are generally disabled in the DoD.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-disable_pocket" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisablePocket'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-disable_pocket:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-disable_pocket_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-disable_studies" selected="false" severity="medium">
          <xccdf-1.2:title>Disable Firefox Studies</xccdf-1.2:title>
          <xccdf-1.2:description>Pocket may be disabled by setting
<html:code>DisableFirefoxStudies</html:code> to <html:code>true</html:code>
in the policies file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000039</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Studies try out different features and ideas prior to release to all Firefox users. Testing beta software is not in the DoD user's mission.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-disable_studies" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFirefoxStudies'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-disable_studies:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-disable_studies_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-dns_over_https" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured so that DNS over HTTPS is disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>DNS over HTTPS feature may be disabled via administrative policy by setting
<html:code>Enabled</html:code> under <html:code>DNSOverHTTPS</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000033</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>DNS over HTTPS has generally not been adopted in the DoD. DNS is tightly controlled.
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-dns_over_https" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'DNSOverHTTPS' in _tree['policies']:
   pass
else:
   _tree['policies']['DNSOverHTTPS'] = dict()

_tree['policies']['DNSOverHTTPS']['Enabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-dns_over_https:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-encrypted_media_extensions" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox encrypted media extensions must be disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox's Encrypted Media Extensions support playback of media content that is subject to Digital Right Management.
These extensions may be disabled completely by setting
<html:ul><html:li><html:code>Enabled</html:code> under <html:code>EncryptedMediaExtensions</html:code> to <html:code>false</html:code></html:li><html:li><html:code>Locked</html:code> under <html:code>EncryptedMediaExtensions</html:code> to <html:code>true</html:code></html:li></html:ul>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000037</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Enable or disable Encrypted Media Extensions and optionally lock it.
If "Enabled" is set to "false", Firefox does not download encrypted media extensions (such as Widevine) unless the user consents to installing them.
If "Locked" is set to "true" and "Enabled" is set to "false", Firefox will not download encrypted media extensions (such as Widevine) or ask the user to install them.
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-encrypted_media_extensions" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'EncryptedMediaExtensions' in _tree['policies']:
   pass
else:
   _tree['policies']['EncryptedMediaExtensions'] = dict()

_tree['policies']['EncryptedMediaExtensions']['Enabled'] = False


if 'EncryptedMediaExtensions' in _tree['policies']:
   pass
else:
   _tree['policies']['EncryptedMediaExtensions'] = dict()

_tree['policies']['EncryptedMediaExtensions']['Locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-encrypted_media_extensions:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-enhanced_tracking" selected="false" severity="medium">
          <xccdf-1.2:title>Enabled Firefox Enhanced Tracking Protection</xccdf-1.2:title>
          <xccdf-1.2:description>Enhanced Tracking Protection may be enabled by setting
<html:code>browser.contentblocking.category</html:code> to <html:code>strict</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000025</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Tracking generally refers to content, cookies, or scripts that can collect your browsing data across multiple sites.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-enhanced_tracking" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.contentblocking.category' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.contentblocking.category'] = dict()

_tree['policies']['Preferences']['browser.contentblocking.category']['Value'] = 'strict'


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.contentblocking.category' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.contentblocking.category'] = dict()

_tree['policies']['Preferences']['browser.contentblocking.category']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-enhanced_tracking:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-enhanced_tracking_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-extension_recommendation" selected="false" severity="medium">
          <xccdf-1.2:title>Disabled Firefox Extension Recommendations</xccdf-1.2:title>
          <xccdf-1.2:description>Extension recommendations may be disabled by setting
<html:code>extensions.htmlaboutaddons.recommendations.enabled</html:code> to <html:code>false</html:code> in the policy file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000026</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Recommended Extensions program will make it easier for users to discover extensions that have been reviewed for security, functionality, and user experience.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-extension_recommendation" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'extensions.htmlaboutaddons.recommendations.enabled' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled'] = dict()

_tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled']['Value'] = False


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'extensions.htmlaboutaddons.recommendations.enabled' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled'] = dict()

_tree['policies']['Preferences']['extensions.htmlaboutaddons.recommendations.enabled']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-extension_recommendation:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-extension_recommendation_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-extension_update" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured to not automatically update installed add-ons and plugins.</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox has a feature to permit installed add-ons and plugins to automatically update. The check may be disabled in an
administrative policy by setting the <html:code>ExtensionUpdate</html:code> key under <html:code>policies</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000005</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Automatic updates from untrusted sites puts the entire enclave at risk and may override existing security settings.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-extension_update" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['ExtensionUpdate'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-extension_update:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-extension_update_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-feedback_reporting" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox feedback reporting must be disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>Feedback reporting feature may be disabled via administrative policy by setting
<html:code>DisableFeedbackCommands</html:code> under <html:code>policies</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000036</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Disable the menus for reporting sites (Submit Feedback, Report Deceptive Site). 
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-feedback_reporting" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFeedbackCommands'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-feedback_reporting:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-fingerprinting_protection" selected="false" severity="medium">
          <xccdf-1.2:title>Enabled Firefox Fingerprinting Protection</xccdf-1.2:title>
          <xccdf-1.2:description>Fingerprinting protection may be enabled by setting
<html:code>Fingerprinting</html:code> to <html:code>true</html:code> under <html:code>EnableTrackingProtection</html:code>
in the policies file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000023</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Content Blocking/Tracking Protection feature stops Firefox from loading content from malicious sites. The content might be a script or an image, for example. If a site is on one of the tracker lists you set Firefox to use, then the fingerprinting script (or other tracking script/image) will not be loaded from that site.
Fingerprinting scripts collect information about your browser and device configuration, such as your operating system, screen resolution, and other settings. By compiling these pieces of data, fingerprinters create a unique profile of you that can be used to track you around the Web.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-fingerprinting_protection" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'EnableTrackingProtection' in _tree['policies']:
   pass
else:
   _tree['policies']['EnableTrackingProtection'] = dict()

_tree['policies']['EnableTrackingProtection']['Fingerprinting'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-fingerprinting_protection:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-fingerprinting_protection_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-forget_button" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must prevent the user from quickly deleting data.</xccdf-1.2:title>
          <xccdf-1.2:description>The update check may be disabled in an administrative policy by setting
the <html:code>DisableForgetButton</html:code> key under <html:code>policies</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000018</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-002355</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-24(2)</xccdf-1.2:reference>
          <xccdf-1.2:rationale>There should not be an option for a user to "forget" work they have done. This is required to meet non-repudiation controls.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-forget_button" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableForgetButton'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-forget_button:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-forget_button_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_changes" selected="false" severity="medium">
          <xccdf-1.2:title>Disable JavaScript's Raise Or Lower Windows Capability</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically raising and lowering windows. This can be disabled by
setting <html:code>dom.disable_window_flip</html:code> to <html:code>true</html:code> in the policy file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000011</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>JavaScript can make changes to the browser&#x2019;s appearance. Allowing a website
to use JavaScript to raise and lower browser windows may disguise an attack.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-javascript_window_changes" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_flip' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_flip'] = dict()

_tree['policies']['Preferences']['dom.disable_window_flip']['Value'] = True


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_flip' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_flip'] = dict()

_tree['policies']['Preferences']['dom.disable_window_flip']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-javascript_window_changes:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-javascript_window_changes_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-javascript_window_resizing" selected="false" severity="medium">
          <xccdf-1.2:title>Disable JavaScript's Moving Or Resizing Windows Capability</xccdf-1.2:title>
          <xccdf-1.2:description>JavaScript can configure and make changes to the web browser's appearance by
specifically moving and resizing browser windows. This can be disabled by
setting <html:code>dom.disable_window_move_resize</html:code> to <html:code>true</html:code> in the policy file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000010</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>JavaScript can make changes to the browser&#x2019;s appearance. This activity
can help disguise an attack taking place in a minimized background window.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-javascript_window_resizing" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_move_resize' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_move_resize'] = dict()

_tree['policies']['Preferences']['dom.disable_window_move_resize']['Value'] = True


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'dom.disable_window_move_resize' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['dom.disable_window_move_resize'] = dict()

_tree['policies']['Preferences']['dom.disable_window_move_resize']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-javascript_window_resizing:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-javascript_window_resizing_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-network_prediction" selected="false" severity="medium">
          <xccdf-1.2:title>Disable Firefox network prediction</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox has a feature where it predicts and caches DNS requests.
This can be disabled by
setting <html:code>NetworkPrediction</html:code> to <html:code>true</html:code> in the policy file.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000022</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>With network prediction enabled, URL requests are made without user consent.
Browsers should always make a direct DNS request with prefetching. </xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-network_prediction" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['NetworkPrediction'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-network_prediction:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-network_prediction_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-no_sanitize_on_shutdown" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured to not delete data upon shutdown.</xccdf-1.2:title>
          <xccdf-1.2:description>The default certificate to present may be configured by setting multiple options
under <html:code>SanitizeOnShutdown</html:code> key.
<html:ul><html:li><html:code>Cache</html:code> = <html:code>false</html:code></html:li></html:ul></xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000017</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7 a</xccdf-1.2:reference>
          <xccdf-1.2:rationale>For diagnostic purposes, data must remain behind when the browser is closed. This is required to meet non-repudiation controls.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-no_sanitize_on_shutdown" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Cache'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Cookies'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Downloads'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['FormData'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['History'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Sessions'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['SiteSettings'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['OfflineApps'] = False


if 'SanitizeOnShutdown' in _tree['policies']:
   pass
else:
   _tree['policies']['SanitizeOnShutdown'] = dict()

_tree['policies']['SanitizeOnShutdown']['Locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-no_sanitize_on_shutdown:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-nonessential_capabilities" selected="false" severity="medium">
          <xccdf-1.2:title>The Firefox New Tab page must not show Top Sites, Sponsored Top sites, Pocket Recommendations, Sponsored Pocket Stories, Searches, Highlights, or Snippets.</xccdf-1.2:title>
          <xccdf-1.2:description>Display of top sites may be disabled in an administrative policy by setting the following items under <html:code>FirefoxHome</html:code>
to <html:code>false</html:code> and by setting the <html:code>locked</html:code> key to <html:code>true</html:code>.
<html:code>Search</html:code>
<html:code>TopSites</html:code>
<html:code>SponsoredTopSites</html:code>
<html:code>Pocket</html:code>
<html:code>SponsoredPocket</html:code>
<html:code>Highlights</html:code>
<html:code>Snippets</html:code></xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000029</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The New Tab page by default shows a list of built-in top sites, as well as the top sites the user has visited.
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.
The new tab page must not actively show user activity.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-nonessential_capabilities" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Search'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['TopSites'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['SponsoredTopSites'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Pocket'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['SponsoredPocket'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Highlights'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['Snippets'] = False


if 'FirefoxHome' in _tree['policies']:
   pass
else:
   _tree['policies']['FirefoxHome'] = dict()

_tree['policies']['FirefoxHome']['locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-nonessential_capabilities:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-password_manager" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured to not use a password store with or without a master password.</xccdf-1.2:title>
          <xccdf-1.2:description>The update check may be disabled in an administrative policy by setting
the <html:code>PasswordManager</html:code> key under <html:code>policies</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000008</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Firefox can be set to store passwords for sites visited by the user. These individual passwords are stored in a file and can be protected by a master password. Autofill of the password can then be enabled when the site is visited. This feature could also be used to autofill the certificate PIN, which could lead to compromise of DoD information.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-password_manager" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['PasswordManagerEnabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-password_manager:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-pop-up_windows" selected="false" severity="medium">
          <xccdf-1.2:title>Enable Firefox Pop-up Blocker</xccdf-1.2:title>
          <xccdf-1.2:description>The pop-up blocker can be enabled by setting
<html:code>Default</html:code> key under <html:code>PopupBlocking</html:code> to <html:code>true</html:code> in <html:code>policies.json</html:code>.
<html:code>Allowed</html:code> may be set to a list of sites allowed to use popups. </xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000009</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Popup windows may be used to launch an attack within a new browser window
with altered settings.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-pop-up_windows" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'PopupBlocking' in _tree['policies']:
   pass
else:
   _tree['policies']['PopupBlocking'] = dict()

_tree['policies']['PopupBlocking']['Default'] = True


if 'PopupBlocking' in _tree['policies']:
   pass
else:
   _tree['policies']['PopupBlocking'] = dict()

_tree['policies']['PopupBlocking']['Locked'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-pop-up_windows:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-pop-up_windows_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-private_browsing" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox private browsing must be disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>Private browsing may be disabled in an administrative policy by setting
the <html:code>DisablePrivateBrowsing</html:code> key under <html:code>policies</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000019</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Private browsing allows the user to browse the internet without recording their browsing history/activity. From a forensics perspective, this is unacceptable. Best practice requires that browser history is retained.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-private_browsing" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisablePrivateBrowsing'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-private_browsing:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-private_browsing_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-search_suggestion" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox search suggestions must be disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>Search Suggestions may be disabled in an administrative policy by setting
the <html:code>SearchSuggestEnabled</html:code> key under <html:code>policies</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000020</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Search suggestions must be disabled as this could lead to searches being conducted that were never intended to be made.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-search_suggestion" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['SearchSuggestEnabled'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-search_suggestion:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-search_suggestion_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-search_update" selected="false" severity="medium">
          <xccdf-1.2:title>Disable Installed Search Plugins Update Checking</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox automatically checks for updated versions of search plugins.
To disable the automatic updates of plugins, set value of
<html:code>browser.search.update</html:code> to <html:code>false</html:code> via policies.json.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000004</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Updates need to be controlled and installed from authorized and trusted servers.
This setting overrides a number of other settings which may direct the application
to access external URLs.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-search_update" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.search.update' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.search.update'] = dict()

_tree['policies']['Preferences']['browser.search.update']['Value'] = False


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'browser.search.update' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['browser.search.update'] = dict()

_tree['policies']['Preferences']['browser.search.update']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-search_update:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-search_update_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-ssl_minimum_version" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must be configured to allow only TLS 1.2 or above.</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox may be configured via administrative policy to allow TLS 1.2 at minimum
by setting <html:code>SSLVersionMin</html:code> to <html:code>tls1.2</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000002</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001453</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-17 (2)</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Use of versions prior to TLS 1.2 are not permitted. SSL 2.0 and SSL 3.0 contain a number of security flaws. 
These versions must be disabled in compliance with the Network Infrastructure and Secure Remote Computing STIGs.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-ssl_minimum_version" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['SSLVersionMin'] = 'tls1.2'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-ssl_minimum_version:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-sync" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox accounts must be disabled.</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox accounts feature may be disabled via administrative policy by setting
<html:code>DisableFirefoxAccounts</html:code> under <html:code>policies</html:code> to <html:code>true</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000034</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Disable Firefox Accounts integration (Sync). 
It is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. These unnecessary capabilities or services are often overlooked and therefore may remain unsecured. They increase the risk to the platform by providing additional attack vectors.
Applications are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).
Examples of non-essential capabilities include but are not limited to advertising software or browser plug-ins that are not related to requirements or provide a wide array of functionality not required for every mission but that cannot be disabled.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-sync" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableFirefoxAccounts'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-sync:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-telemetry" selected="false" severity="medium">
          <xccdf-1.2:title>Disable Firefox Telemetry</xccdf-1.2:title>
          <xccdf-1.2:description>Telemetry can be disabled by setting
<html:code>toolkit.telemetry.enabled</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000014</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Telemetry feature provides this capability by sending performance and usage info to Mozilla. As you use Firefox, Telemetry measures and collects non-personal information, such as performance, hardware, usage and customizations. It then sends this information to Mozilla on a daily basis and we use it to improve Firefox</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-telemetry" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


_tree['policies']['DisableTelemetry'] = True

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-telemetry:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-telemetry_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-user_messaging" selected="false" severity="medium">
          <xccdf-1.2:title>Firefox must not recommend extensions as the user is using the browser.</xccdf-1.2:title>
          <xccdf-1.2:description>The extension recommendation messages may be disabled in an administrative policy by setting
the <html:code>ExtensionRecommendations</html:code> key under <html:code>UserMessaging</html:code> to <html:code>false</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000028</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000381</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">CM-7</xccdf-1.2:reference>
          <xccdf-1.2:rationale>The Recommended Extensions program recommends extensions to users as they surf the web.
The user must not be encouraged to install extensions from the websites they visit. Allowed extensions are to be centrally managed.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-user_messaging" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'UserMessaging' in _tree['policies']:
   pass
else:
   _tree['policies']['UserMessaging'] = dict()

_tree['policies']['UserMessaging']['ExtensionRecommendations'] = False

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-user_messaging:def:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_policy-verification" selected="false" severity="medium">
          <xccdf-1.2:title>Enable Certificate Verification</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox can be configured to prompt the user to choose a certificate
to present to a website when asked. To enable certificate verification,
set <html:code>security.default_personal_cert</html:code> to <html:code>Ask Every Time</html:code>
in an administrative policies file</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000003</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000187</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5(2)</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Websites within DoD require user authentication for access which increases
security for DoD information. Access will be denied to the user if
certificate management is not configured.</xccdf-1.2:rationale>
          <xccdf-1.2:fix id="firefox_policy-verification" strategy="policy" system="urn:xccdf:fix:script:sh">
firefox_cfg="policies.json"
# Default to /etc/firefox/policies to use for remediations.
firefox_dirs="/etc/firefox/policies"
permissions=644

declare __REMEDIATE_PYTHON
if [ -x /usr/bin/python ]; then
    __REMEDIATE_PYTHON=/usr/bin/python
elif [ -x /usr/bin/python3 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python3
elif [ -x /usr/bin/python2 ]; then
    __REMEDIATE_PYTHON=/usr/bin/python2
else
    echo "Python required and no python interpreter found."
    exit 1
fi
declare __FIREFOX_DISTRIBUTION
if find /usr -iname firefox\* -type f -print | grep -qe "firefox.sh$\|firefox-bin$"; then
   __FIREFOX_DISTRIBUTION=$(dirname "$(find /usr -iname firefox\* -type f -print | grep -e "firefox.sh$\|firefox-bin$" | head -n1)")/distribution
fi
# If there's a policies file in the distribution directory already, modify it.
if [ -f ${__FIREFOX_DISTRIBUTION}/policies.json ]; then
        firefox_dirs="${__FIREFOX_DISTRIBUTION}"
fi
# Check the possible Firefox install directories
for firefox_dir in ${firefox_dirs}; do
    if ! [ -d "${firefox_dir}" ]; then
        mkdir -p "${firefox_dir}"
        chmod 755 "${firefox_dir}"
    fi
    # Make sure the Firefox .cfg file exists and has the appropriate permissions
    if ! [ -f "${firefox_dir}/${firefox_cfg}" ] ; then
        echo "{" &gt; "${firefox_dir}/${firefox_cfg}"
        echo "    \"policies\": {" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "    }" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        echo "}" &gt;&gt; "${firefox_dir}/${firefox_cfg}"
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
    # If the key exists, change it. Otherwise, add it to the config_file.
    if [ -x ${__REMEDIATE_PYTHON} ]; then
        echo """
import json
_file=open('${firefox_dir}/${firefox_cfg}', 'r')
_tree=json.load(_file)
_file.close()


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'security.default_personal_cert' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['security.default_personal_cert'] = dict()

_tree['policies']['Preferences']['security.default_personal_cert']['Value'] = 'Ask Every Time'


if 'Preferences' in _tree['policies']:
   pass
else:
   _tree['policies']['Preferences'] = dict()

if 'security.default_personal_cert' in _tree['policies']['Preferences']:
   pass
else:
   _tree['policies']['Preferences']['security.default_personal_cert'] = dict()

_tree['policies']['Preferences']['security.default_personal_cert']['Status'] = 'locked'

_file=open('${firefox_dir}/${firefox_cfg}', 'w')
json.dump(_tree, _file, indent=4, sort_keys=True)
_file.close()
""" | ${__REMEDIATE_PYTHON}
        chmod ${permissions} "${firefox_dir}/${firefox_cfg}"
    fi
done
</xccdf-1.2:fix>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-firefox_policy-verification:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_policy-verification_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_preferences-auto-download_actions" selected="false" severity="medium">
          <xccdf-1.2:title>Disable auto-download for proscribed MIME types.</xccdf-1.2:title>
          <xccdf-1.2:description>Firefox must be configured to not automatically execute or download MIME types that are not
authorized for auto-download.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000006</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-001242</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SI-3 c</xccdf-1.2:reference>
          <xccdf-1.2:rationale>This setting ensures that some file types that may be downloaded or executed without user interaction
are not downloaded and/or executed.</xccdf-1.2:rationale>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_installed_firefox_version_supported" selected="false" severity="high">
          <xccdf-1.2:title>Supported Version of Firefox Installed</xccdf-1.2:title>
          <xccdf-1.2:description>If the system is joined to the Red Hat Network, a Red Hat Satellite Server,
or a yum server, run the following command to install updates:
<html:pre>$ sudo yum update</html:pre>
If the system is not configured to use one of these sources, updates (in the form of RPM packages)
can be manually downloaded and installed using <html:code>rpm</html:code>.</xccdf-1.2:description>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000001</xccdf-1.2:reference>
          <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-003376</xccdf-1.2:reference>
          <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">SA-22</xccdf-1.2:reference>
          <xccdf-1.2:rationale>Use of versions of an application which are not supported by the vendor
are not permitted. Vendors respond to security flaws with updates and
patches. These updates are not available for unsupported version which
can leave the application vulnerable to attack.</xccdf-1.2:rationale>
          <xccdf-1.2:check system="http://oval.mitre.org/XMLSchema/oval-definitions-5">
            <xccdf-1.2:check-content-ref href="ssg-firefox-oval.xml" name="oval:ssg-installed_firefox_version_supported:def:1"/>
          </xccdf-1.2:check>
          <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
            <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1"/>
          </xccdf-1.2:check>
        </xccdf-1.2:Rule>
        <xccdf-1.2:Group id="xccdf_org.ssgproject.content_group_firefox_preferences-dod_root_certificate">
          <xccdf-1.2:title>The DoD Root Certificate Is Required</xccdf-1.2:title>
          <xccdf-1.2:description>The Shared System Certificates store contains certificates that
applications can access for a single certificate repository.
If enabled, Firefox can access that single system certificate
repository. If the DoD root certificate is also installed into
the shared system certificate repository, Firefox will see and 
use the DoD root certificate as a valid certificate authority.</xccdf-1.2:description>
          <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_preferences-dod_root_certificate_installed" selected="false" severity="medium">
            <xccdf-1.2:title>The DoD Root Certificate Exists</xccdf-1.2:title>
            <xccdf-1.2:description>The DoD root certificate should be installed in the Shared System Certificates store
for Firefox to be able to access the DoD certificate. To install the root certificated
into the Shared System Certificates store, copy the DoD root certificate into
<html:code>/etc/pki/ca-trust/source/anchors</html:code>. Once the file is copied, run the following
command:
<html:pre>$ sudo update-ca-trust extract</html:pre></xccdf-1.2:description>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux">FFOX-00-000016</xccdf-1.2:reference>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000054</xccdf-1.2:reference>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">IA-5 (2)</xccdf-1.2:reference>
            <xccdf-1.2:rationale>The DOD root certificate will ensure that the trust chain is
established for server certificates issued from the DOD CA.</xccdf-1.2:rationale>
            <xccdf-1.2:ident system="https://nvd.nist.gov/cce/index.cfm">CCE-82056-3</xccdf-1.2:ident>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
          <xccdf-1.2:Rule id="xccdf_org.ssgproject.content_rule_firefox_preferences-enable_ca_trust" selected="false" severity="medium">
            <xccdf-1.2:title>Enable Shared System Certificates</xccdf-1.2:title>
            <xccdf-1.2:description>The Shared System Certificates store makes NSS, GnuTLS, OpenSSL, and Java
share a default source for retrieving system certificate anchors and blacklist
information. Firefox has the capability of using this centralized store for its
CA certificates. If the Shared System Certificates store is disabled, it can
be enabled by running the following command:
<html:pre>$ sudo update-ca-trust enable</html:pre></xccdf-1.2:description>
            <xccdf-1.2:reference href="https://public.cyber.mil/stigs/cci/">CCI-000054</xccdf-1.2:reference>
            <xccdf-1.2:reference href="http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-53r4.pdf">AC-10</xccdf-1.2:reference>
            <xccdf-1.2:rationale>The DOD root certificate will ensure that the trust chain is
established for server certificates issued from the DOD CA.</xccdf-1.2:rationale>
            <xccdf-1.2:ident system="https://nvd.nist.gov/cce/index.cfm">CCE-82057-1</xccdf-1.2:ident>
            <xccdf-1.2:fix id="firefox_preferences-enable_ca_trust" system="urn:xccdf:fix:script:sh">P11=$(readlink /etc/alternatives/libnssckbi.so*)
P11LIB="/usr/lib/pkcs11/p11-kit-trust.so"
P11LIB64="/usr/lib64/pkcs11/p11-kit-trust.so"

if ! [[ ${P11} == "${P11LIB64}" ]] || ! [[ ${P11} == "${P11LIB}" ]] ; then
   /usr/bin/update-ca-trust enable
fi
</xccdf-1.2:fix>
            <xccdf-1.2:check system="http://scap.nist.gov/schema/ocil/2">
              <xccdf-1.2:check-content-ref href="ssg-firefox-ocil.xml" name="ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1"/>
            </xccdf-1.2:check>
          </xccdf-1.2:Rule>
        </xccdf-1.2:Group>
      </xccdf-1.2:Group>
    </xccdf-1.2:Benchmark>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-oval.xml" timestamp="2023-03-07T14:49:38">
    <oval-def:oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux linux-definitions-schema.xsd">
      <oval-def:generator>
        <oval:product_name>combine_ovals.py from SCAP Security Guide</oval:product_name>
        <oval:product_version>ssg: [0, 1, 66], python: 2.7.5</oval:product_version>
        <oval:schema_version>5.11</oval:schema_version>
        <oval:timestamp>2023-03-07T14:49:13</oval:timestamp>
      </oval-def:generator>
      <oval-def:definitions>
        <oval-def:definition class="compliance" id="oval:ssg-installed_firefox_version_supported:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Supported Version of Firefox Installed</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Use of versions of an application which are not
      supported by the vendor are not permitted. Vendors respond to
      security flaws with updates and patches. These updates are not
      available for unsupported versions which can leave the application
      vulnerable to attack.</oval-def:description>
            <oval-def:reference ref_id="installed_firefox_version_supported" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="installed version of firefox supported" test_ref="oval:ssg-test_supported_version_of_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="inventory" id="oval:ssg-installed_app_is_firefox:def:1" version="2">
          <oval-def:metadata>
            <oval-def:title>Mozilla Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:reference ref_id="cpe:/a:mozilla:firefox" source="CPE"/>
            <oval-def:description>The application installed on the system is firefox.</oval-def:description>
            <oval-def:reference ref_id="installed_app_is_firefox" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria operator="AND">
            <oval-def:extend_definition comment="Installed OS is part of the Unix family" definition_ref="oval:ssg-installed_OS_is_part_of_Unix_family:def:1"/>
            <oval-def:criterion comment="Firefox is installed" test_ref="oval:ssg-test_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-addons_permission:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured to disable the installation of extensions.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable extension installation in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-addons_permission" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting InstallAddonsPermission.Default to 'false'." test_ref="oval:ssg-test_firefox_policy-addons_permission_InstallAddonsPermission_Default:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-autoplay_video:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox autoplay must be disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable autoplay for videos with audio content in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-autoplay_video" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Permissions.Autoplay.Default to 'block-audio-video'." test_ref="oval:ssg-test_firefox_policy-autoplay_video_Permissions_Autoplay_Default:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-cryptomining:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enabled Firefox Cryptomining protection</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Enable tracking protection for cryptomining in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-cryptomining" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting EnableTrackingProtection.Cryptomining to 'true'." test_ref="oval:ssg-test_firefox_policy-cryptomining_EnableTrackingProtection_Cryptomining:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-development_tools:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Development Tools</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable developer tools in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-development_tools" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableDeveloperTools to 'true'." test_ref="oval:ssg-test_firefox_policy-development_tools__DisableDeveloperTools:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-disable_deprecated_ciphers:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox deprecated ciphers</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable deprecated ciphers in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-disable_deprecated_ciphers" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting DisabledCiphers.TLS_RSA_WITH_3DES_EDE_CBC_SHA to 'true'." test_ref="oval:ssg-test_firefox_policy-disable_deprecated_ciphers_DisabledCiphers_TLS_RSA_WITH_3DES_EDE_CBC_SHA:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-disable_form_history:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured to disable form fill assistance.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable form fill history. in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-disable_form_history" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableFormHistory to 'true'." test_ref="oval:ssg-test_firefox_policy-disable_form_history__DisableFormHistory:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-disable_pocket:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Pocket</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox Pocket in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-disable_pocket" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisablePocket to 'true'." test_ref="oval:ssg-test_firefox_policy-disable_pocket__DisablePocket:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-disable_studies:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Studies</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox Studies in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-disable_studies" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableFirefoxStudies to 'true'." test_ref="oval:ssg-test_firefox_policy-disable_studies__DisableFirefoxStudies:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-dns_over_https:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured so that DNS over HTTPS is disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable DNS over HTTPS in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-dns_over_https" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting DNSOverHTTPS.Enabled to 'false'." test_ref="oval:ssg-test_firefox_policy-dns_over_https_DNSOverHTTPS_Enabled:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-encrypted_media_extensions:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox encrypted media extensions must be disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox Site Feedback in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-encrypted_media_extensions" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting EncryptedMediaExtensions.Enabled to 'false'." test_ref="oval:ssg-test_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Enabled:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting EncryptedMediaExtensions.Locked to 'true'." test_ref="oval:ssg-test_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Locked:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-enhanced_tracking:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enabled Firefox Enhanced Tracking Protection</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Enable enhanced tracking protection in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-enhanced_tracking" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.browser.contentblocking.category.Value to 'strict'." test_ref="oval:ssg-test_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Value:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.browser.contentblocking.category.Status to 'locked'." test_ref="oval:ssg-test_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Status:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-extension_recommendation:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disabled Firefox Extension Recommendations</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox extension recommendations in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-extension_recommendation" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.extensions.htmlaboutaddons.recommendations.enabled.Value to 'false'." test_ref="oval:ssg-test_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Value:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.extensions.htmlaboutaddons.recommendations.enabled.Status to 'locked'." test_ref="oval:ssg-test_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Status:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-extension_update:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured to not automatically update installed add-ons and plugins.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable addon and plugin automatic update in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-extension_update" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .ExtensionUpdate to 'false'." test_ref="oval:ssg-test_firefox_policy-extension_update__ExtensionUpdate:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-feedback_reporting:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox feedback reporting must be disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox Site Feedback in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-feedback_reporting" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableFeedbackCommands to 'true'." test_ref="oval:ssg-test_firefox_policy-feedback_reporting__DisableFeedbackCommands:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-fingerprinting_protection:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enabled Firefox Fingerprinting Protection</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Enable tracking protection for fingerprinting in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-fingerprinting_protection" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting EnableTrackingProtection.Fingerprinting to 'true'." test_ref="oval:ssg-test_firefox_policy-fingerprinting_protection_EnableTrackingProtection_Fingerprinting:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-forget_button:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must prevent the user from quickly deleting data.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Forget button in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-forget_button" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableForgetButton to 'true'." test_ref="oval:ssg-test_firefox_policy-forget_button__DisableForgetButton:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-javascript_window_changes:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript's Raise Or Lower Windows Capability</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable addon and plugin automatic update in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-javascript_window_changes" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.dom.disable_window_flip.Value to 'true'." test_ref="oval:ssg-test_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Value:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.dom.disable_window_flip.Status to 'locked'." test_ref="oval:ssg-test_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Status:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-javascript_window_resizing:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable JavaScript's Moving Or Resizing Windows Capability</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Javascript window move/resize in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-javascript_window_resizing" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.dom.disable_window_move_resize.Value to 'true'." test_ref="oval:ssg-test_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Value:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.dom.disable_window_move_resize.Status to 'locked'." test_ref="oval:ssg-test_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Status:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-network_prediction:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox network prediction</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable addon and plugin automatic update in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-network_prediction" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .NetworkPrediction to 'false'." test_ref="oval:ssg-test_firefox_policy-network_prediction__NetworkPrediction:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-no_sanitize_on_shutdown:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured to not delete data upon shutdown.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Require default personal certificate be chosen every time in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-no_sanitize_on_shutdown" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.Cache to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cache:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.Cookies to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cookies:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.Downloads to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Downloads:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.FormData to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_FormData:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.History to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_History:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.Sessions to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Sessions:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.SiteSettings to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_SiteSettings:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.OfflineApps to 'false'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_OfflineApps:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting SanitizeOnShutdown.Locked to 'true'." test_ref="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Locked:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-nonessential_capabilities:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>The Firefox New Tab page must not show Top Sites, Sponsored Top sites, Pocket Recommendations, Sponsored Pocket Stories, Searches, Highlights, or Snippets.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable dynamic New Tab features in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-nonessential_capabilities" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.Search to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Search:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.TopSites to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_TopSites:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.SponsoredTopSites to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredTopSites:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.Pocket to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Pocket:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.SponsoredPocket to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredPocket:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.Highlights to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Highlights:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.Snippets to 'false'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Snippets:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting FirefoxHome.locked to 'true'." test_ref="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_locked:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-password_manager:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured to not use a password store with or without a master password.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable password manager in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-password_manager" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .PasswordManagerEnabled to 'false'." test_ref="oval:ssg-test_firefox_policy-password_manager__PasswordManagerEnabled:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-pop-up_windows:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable Firefox Pop-up Blocker</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable popup blocking in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-pop-up_windows" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting PopupBlocking.Default to 'true'." test_ref="oval:ssg-test_firefox_policy-pop-up_windows_PopupBlocking_Default:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting PopupBlocking.Locked to 'true'." test_ref="oval:ssg-test_firefox_policy-pop-up_windows_PopupBlocking_Locked:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-private_browsing:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox private browsing must be disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Private Browsing feature in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-private_browsing" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisablePrivateBrowsing to 'true'." test_ref="oval:ssg-test_firefox_policy-private_browsing__DisablePrivateBrowsing:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-search_suggestion:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox search suggestions must be disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable search suggestion in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-search_suggestion" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .SearchSuggestEnabled to 'false'." test_ref="oval:ssg-test_firefox_policy-search_suggestion__SearchSuggestEnabled:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-search_update:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Installed Search Plugins Update Checking</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Search Plugin Updates in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-search_update" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.browser.search.update.Value to 'false'." test_ref="oval:ssg-test_firefox_policy-search_update_Preferences_browser.search.update_Value:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.browser.search.update.Status to 'locked'." test_ref="oval:ssg-test_firefox_policy-search_update_Preferences_browser.search.update_Status:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-ssl_minimum_version:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must be configured to allow only TLS 1.2 or above.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox Sync in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-ssl_minimum_version" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .SSLVersionMin to 'tls1.2'." test_ref="oval:ssg-test_firefox_policy-ssl_minimum_version__SSLVersionMin:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-sync:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox accounts must be disabled.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Firefox Sync in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-sync" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableFirefoxAccounts to 'true'." test_ref="oval:ssg-test_firefox_policy-sync__DisableFirefoxAccounts:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-telemetry:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Disable Firefox Telemetry</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable telemetry in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-telemetry" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting .DisableTelemetry to 'true'." test_ref="oval:ssg-test_firefox_policy-telemetry__DisableTelemetry:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-user_messaging:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Firefox must not recommend extensions as the user is using the browser.</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Disable Extension Recommendation Messages in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-user_messaging" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting UserMessaging.ExtensionRecommendations to 'false'." test_ref="oval:ssg-test_firefox_policy-user_messaging_UserMessaging_ExtensionRecommendations:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="compliance" id="oval:ssg-firefox_policy-verification:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Enable Certificate Verification</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>Check setting of Configure Default Personal Certificate to Ask Every Time in Firefox policy</oval-def:description>
            <oval-def:reference ref_id="firefox_policy-verification" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria comment="Test conditions - Firefox policy item is set." operator="AND">
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.security.default_personal_cert.Value to 'Ask Every Time'." test_ref="oval:ssg-test_firefox_policy-verification_Preferences_security.default_personal_cert_Value:tst:1"/>
            <oval-def:criterion comment="Check that Firefox administrative policy setting Preferences.security.default_personal_cert.Status to 'locked'." test_ref="oval:ssg-test_firefox_policy-verification_Preferences_security.default_personal_cert_Status:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="inventory" id="oval:ssg-installed_OS_is_part_of_Unix_family:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Installed operating system is part of the Unix family</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The operating system installed on the system is part of the Unix OS family</oval-def:description>
            <oval-def:reference ref_id="installed_OS_is_part_of_Unix_family" source="ssg"/>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Installed operating system is part of the unix family" test_ref="oval:ssg-test_unix_family:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
      </oval-def:definitions>
      <oval-def:tests>
        <linux:rpminfo_test check="all" check_existence="any_exist" comment="Installed version of firefox is greater than 68.4.0" id="oval:ssg-test_supported_version_of_firefox:tst:1" version="1">
          <linux:object object_ref="oval:ssg-obj_supported_version_of_firefox:obj:1"/>
          <linux:state state_ref="oval:ssg-state_supported_version_of_firefox:ste:1"/>
        </linux:rpminfo_test>
        <linux:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Firefox is installed via RPM" id="oval:ssg-test_firefox:tst:1" version="1">
          <linux:object object_ref="oval:ssg-obj_firefox:obj:1"/>
        </linux:rpminfo_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of InstallAddonsPermission.Default in Firefox policy file" id="oval:ssg-test_firefox_policy-addons_permission_InstallAddonsPermission_Default:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-addons_permission_InstallAddonsPermission_Default:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-addons_permission_InstallAddonsPermission_Default:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Permissions.Autoplay.Default in Firefox policy file" id="oval:ssg-test_firefox_policy-autoplay_video_Permissions_Autoplay_Default:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-autoplay_video_Permissions_Autoplay_Default:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-autoplay_video_Permissions_Autoplay_Default:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of EnableTrackingProtection.Cryptomining in Firefox policy file" id="oval:ssg-test_firefox_policy-cryptomining_EnableTrackingProtection_Cryptomining:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-cryptomining_EnableTrackingProtection_Cryptomining:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-cryptomining_EnableTrackingProtection_Cryptomining:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableDeveloperTools in Firefox policy file" id="oval:ssg-test_firefox_policy-development_tools__DisableDeveloperTools:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-development_tools__DisableDeveloperTools:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-development_tools__DisableDeveloperTools:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of DisabledCiphers.TLS_RSA_WITH_3DES_EDE_CBC_SHA in Firefox policy file" id="oval:ssg-test_firefox_policy-disable_deprecated_ciphers_DisabledCiphers_TLS_RSA_WITH_3DES_EDE_CBC_SHA:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-disable_deprecated_ciphers_DisabledCiphers_TLS_RSA_WITH_3DES_EDE_CBC_SHA:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-disable_deprecated_ciphers_DisabledCiphers_TLS_RSA_WITH_3DES_EDE_CBC_SHA:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableFormHistory in Firefox policy file" id="oval:ssg-test_firefox_policy-disable_form_history__DisableFormHistory:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-disable_form_history__DisableFormHistory:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-disable_form_history__DisableFormHistory:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisablePocket in Firefox policy file" id="oval:ssg-test_firefox_policy-disable_pocket__DisablePocket:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-disable_pocket__DisablePocket:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-disable_pocket__DisablePocket:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableFirefoxStudies in Firefox policy file" id="oval:ssg-test_firefox_policy-disable_studies__DisableFirefoxStudies:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-disable_studies__DisableFirefoxStudies:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-disable_studies__DisableFirefoxStudies:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of DNSOverHTTPS.Enabled in Firefox policy file" id="oval:ssg-test_firefox_policy-dns_over_https_DNSOverHTTPS_Enabled:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-dns_over_https_DNSOverHTTPS_Enabled:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-dns_over_https_DNSOverHTTPS_Enabled:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of EncryptedMediaExtensions.Enabled in Firefox policy file" id="oval:ssg-test_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Enabled:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Enabled:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Enabled:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of EncryptedMediaExtensions.Locked in Firefox policy file" id="oval:ssg-test_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Locked:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Locked:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Locked:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.browser.contentblocking.category.Value in Firefox policy file" id="oval:ssg-test_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Value:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Value:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.browser.contentblocking.category.Status in Firefox policy file" id="oval:ssg-test_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Status:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Status:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Status:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.extensions.htmlaboutaddons.recommendations.enabled.Value in Firefox policy file" id="oval:ssg-test_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Value:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Value:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.extensions.htmlaboutaddons.recommendations.enabled.Status in Firefox policy file" id="oval:ssg-test_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Status:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Status:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Status:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .ExtensionUpdate in Firefox policy file" id="oval:ssg-test_firefox_policy-extension_update__ExtensionUpdate:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-extension_update__ExtensionUpdate:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-extension_update__ExtensionUpdate:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableFeedbackCommands in Firefox policy file" id="oval:ssg-test_firefox_policy-feedback_reporting__DisableFeedbackCommands:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-feedback_reporting__DisableFeedbackCommands:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-feedback_reporting__DisableFeedbackCommands:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of EnableTrackingProtection.Fingerprinting in Firefox policy file" id="oval:ssg-test_firefox_policy-fingerprinting_protection_EnableTrackingProtection_Fingerprinting:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-fingerprinting_protection_EnableTrackingProtection_Fingerprinting:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-fingerprinting_protection_EnableTrackingProtection_Fingerprinting:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableForgetButton in Firefox policy file" id="oval:ssg-test_firefox_policy-forget_button__DisableForgetButton:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-forget_button__DisableForgetButton:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-forget_button__DisableForgetButton:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.dom.disable_window_flip.Value in Firefox policy file" id="oval:ssg-test_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Value:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Value:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.dom.disable_window_flip.Status in Firefox policy file" id="oval:ssg-test_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Status:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Status:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Status:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.dom.disable_window_move_resize.Value in Firefox policy file" id="oval:ssg-test_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Value:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Value:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.dom.disable_window_move_resize.Status in Firefox policy file" id="oval:ssg-test_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Status:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Status:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Status:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .NetworkPrediction in Firefox policy file" id="oval:ssg-test_firefox_policy-network_prediction__NetworkPrediction:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-network_prediction__NetworkPrediction:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-network_prediction__NetworkPrediction:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.Cache in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cache:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cache:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cache:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.Cookies in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cookies:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cookies:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cookies:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.Downloads in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Downloads:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Downloads:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Downloads:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.FormData in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_FormData:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_FormData:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_FormData:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.History in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_History:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_History:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_History:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.Sessions in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Sessions:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Sessions:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Sessions:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.SiteSettings in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_SiteSettings:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_SiteSettings:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_SiteSettings:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.OfflineApps in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_OfflineApps:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_OfflineApps:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_OfflineApps:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of SanitizeOnShutdown.Locked in Firefox policy file" id="oval:ssg-test_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Locked:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Locked:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Locked:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.Search in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Search:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Search:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Search:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.TopSites in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_TopSites:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_TopSites:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_TopSites:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.SponsoredTopSites in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredTopSites:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredTopSites:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredTopSites:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.Pocket in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Pocket:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Pocket:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Pocket:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.SponsoredPocket in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredPocket:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredPocket:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredPocket:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.Highlights in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Highlights:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Highlights:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Highlights:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.Snippets in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_Snippets:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Snippets:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Snippets:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of FirefoxHome.locked in Firefox policy file" id="oval:ssg-test_firefox_policy-nonessential_capabilities_FirefoxHome_locked:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_locked:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_locked:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .PasswordManagerEnabled in Firefox policy file" id="oval:ssg-test_firefox_policy-password_manager__PasswordManagerEnabled:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-password_manager__PasswordManagerEnabled:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-password_manager__PasswordManagerEnabled:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of PopupBlocking.Default in Firefox policy file" id="oval:ssg-test_firefox_policy-pop-up_windows_PopupBlocking_Default:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-pop-up_windows_PopupBlocking_Default:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-pop-up_windows_PopupBlocking_Default:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of PopupBlocking.Locked in Firefox policy file" id="oval:ssg-test_firefox_policy-pop-up_windows_PopupBlocking_Locked:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-pop-up_windows_PopupBlocking_Locked:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-pop-up_windows_PopupBlocking_Locked:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisablePrivateBrowsing in Firefox policy file" id="oval:ssg-test_firefox_policy-private_browsing__DisablePrivateBrowsing:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-private_browsing__DisablePrivateBrowsing:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-private_browsing__DisablePrivateBrowsing:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .SearchSuggestEnabled in Firefox policy file" id="oval:ssg-test_firefox_policy-search_suggestion__SearchSuggestEnabled:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-search_suggestion__SearchSuggestEnabled:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-search_suggestion__SearchSuggestEnabled:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.browser.search.update.Value in Firefox policy file" id="oval:ssg-test_firefox_policy-search_update_Preferences_browser.search.update_Value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-search_update_Preferences_browser.search.update_Value:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-search_update_Preferences_browser.search.update_Value:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.browser.search.update.Status in Firefox policy file" id="oval:ssg-test_firefox_policy-search_update_Preferences_browser.search.update_Status:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-search_update_Preferences_browser.search.update_Status:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-search_update_Preferences_browser.search.update_Status:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .SSLVersionMin in Firefox policy file" id="oval:ssg-test_firefox_policy-ssl_minimum_version__SSLVersionMin:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-ssl_minimum_version__SSLVersionMin:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-ssl_minimum_version__SSLVersionMin:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableFirefoxAccounts in Firefox policy file" id="oval:ssg-test_firefox_policy-sync__DisableFirefoxAccounts:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-sync__DisableFirefoxAccounts:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-sync__DisableFirefoxAccounts:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of .DisableTelemetry in Firefox policy file" id="oval:ssg-test_firefox_policy-telemetry__DisableTelemetry:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-telemetry__DisableTelemetry:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-telemetry__DisableTelemetry:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of UserMessaging.ExtensionRecommendations in Firefox policy file" id="oval:ssg-test_firefox_policy-user_messaging_UserMessaging_ExtensionRecommendations:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-user_messaging_UserMessaging_ExtensionRecommendations:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-user_messaging_UserMessaging_ExtensionRecommendations:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.security.default_personal_cert.Value in Firefox policy file" id="oval:ssg-test_firefox_policy-verification_Preferences_security.default_personal_cert_Value:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-verification_Preferences_security.default_personal_cert_Value:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-verification_Preferences_security.default_personal_cert_Value:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:textfilecontent54_test check="all" comment="Check setting of Preferences.security.default_personal_cert.Status in Firefox policy file" id="oval:ssg-test_firefox_policy-verification_Preferences_security.default_personal_cert_Status:tst:1" version="1">
          <ind:object object_ref="oval:ssg-obj_firefox_policy-verification_Preferences_security.default_personal_cert_Status:obj:1"/>
          <ind:state state_ref="oval:ssg-state_firefox_policy-verification_Preferences_security.default_personal_cert_Status:ste:1"/>
        </ind:textfilecontent54_test>
        <ind:family_test check="all" check_existence="at_least_one_exists" comment="Test installed OS is part of the unix family" id="oval:ssg-test_unix_family:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_unix_family:obj:1"/>
          <ind:state state_ref="oval:ssg-state_unix_family:ste:1"/>
        </ind:family_test>
      </oval-def:tests>
      <oval-def:objects>
        <linux:rpminfo_object id="oval:ssg-obj_supported_version_of_firefox:obj:1" version="1">
          <linux:name>firefox</linux:name>
        </linux:rpminfo_object>
        <linux:rpminfo_object id="oval:ssg-obj_firefox:obj:1" version="1">
          <linux:name>firefox</linux:name>
        </linux:rpminfo_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-addons_permission_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-addons_permission_InstallAddonsPermission_Default:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-addons_permission_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="InstallAddonsPermission")"InstallAddonsPermission"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Default"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-autoplay_video_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-autoplay_video_Permissions_Autoplay_Default:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-autoplay_video_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Permissions")"Permissions"[\s]*:[\s]*\{[\s\S]*?(?="Autoplay")"Autoplay"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Default"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-cryptomining_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-cryptomining_EnableTrackingProtection_Cryptomining:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-cryptomining_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="EnableTrackingProtection")"EnableTrackingProtection"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Cryptomining"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-development_tools_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-development_tools__DisableDeveloperTools:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-development_tools_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableDeveloperTools"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-disable_deprecated_ciphers_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-disable_deprecated_ciphers_DisabledCiphers_TLS_RSA_WITH_3DES_EDE_CBC_SHA:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-disable_deprecated_ciphers_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="DisabledCiphers")"DisabledCiphers"[\s]*:[\s]*\{[\s\S]*?(?=[^"])TLS_RSA_WITH_3DES_EDE_CBC_SHA"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-disable_form_history_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-disable_form_history__DisableFormHistory:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-disable_form_history_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableFormHistory"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-disable_pocket_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-disable_pocket__DisablePocket:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-disable_pocket_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisablePocket"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-disable_studies_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-disable_studies__DisableFirefoxStudies:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-disable_studies_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableFirefoxStudies"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-dns_over_https_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-dns_over_https_DNSOverHTTPS_Enabled:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-dns_over_https_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="DNSOverHTTPS")"DNSOverHTTPS"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Enabled"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-encrypted_media_extensions_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Enabled:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-encrypted_media_extensions_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="EncryptedMediaExtensions")"EncryptedMediaExtensions"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Enabled"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Locked:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-encrypted_media_extensions_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="EncryptedMediaExtensions")"EncryptedMediaExtensions"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Locked"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-enhanced_tracking_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Value:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-enhanced_tracking_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="browser\.contentblocking\.category")"browser\.contentblocking\.category"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Value"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Status:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-enhanced_tracking_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="browser\.contentblocking\.category")"browser\.contentblocking\.category"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Status"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-extension_recommendation_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Value:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-extension_recommendation_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="extensions\.htmlaboutaddons\.recommendations\.enabled")"extensions\.htmlaboutaddons\.recommendations\.enabled"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Value"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Status:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-extension_recommendation_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="extensions\.htmlaboutaddons\.recommendations\.enabled")"extensions\.htmlaboutaddons\.recommendations\.enabled"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Status"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-extension_update_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-extension_update__ExtensionUpdate:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-extension_update_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])ExtensionUpdate"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-feedback_reporting_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-feedback_reporting__DisableFeedbackCommands:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-feedback_reporting_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableFeedbackCommands"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-fingerprinting_protection_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-fingerprinting_protection_EnableTrackingProtection_Fingerprinting:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-fingerprinting_protection_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="EnableTrackingProtection")"EnableTrackingProtection"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Fingerprinting"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-forget_button_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-forget_button__DisableForgetButton:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-forget_button_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableForgetButton"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-javascript_window_changes_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Value:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-javascript_window_changes_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="dom\.disable\_window\_flip")"dom\.disable\_window\_flip"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Value"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Status:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-javascript_window_changes_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="dom\.disable\_window\_flip")"dom\.disable\_window\_flip"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Status"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-javascript_window_resizing_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Value:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-javascript_window_resizing_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="dom\.disable\_window\_move\_resize")"dom\.disable\_window\_move\_resize"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Value"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Status:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-javascript_window_resizing_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="dom\.disable\_window\_move\_resize")"dom\.disable\_window\_move\_resize"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Status"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-network_prediction_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-network_prediction__NetworkPrediction:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-network_prediction_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])NetworkPrediction"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cache:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Cache"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cookies:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Cookies"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Downloads:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Downloads"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_FormData:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])FormData"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_History:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])History"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Sessions:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Sessions"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_SiteSettings:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])SiteSettings"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_OfflineApps:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])OfflineApps"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Locked:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="SanitizeOnShutdown")"SanitizeOnShutdown"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Locked"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-nonessential_capabilities_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Search:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Search"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_TopSites:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])TopSites"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredTopSites:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])SponsoredTopSites"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Pocket:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Pocket"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredPocket:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])SponsoredPocket"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Highlights:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Highlights"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_Snippets:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Snippets"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-nonessential_capabilities_FirefoxHome_locked:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="FirefoxHome")"FirefoxHome"[\s]*:[\s]*\{[\s\S]*?(?=[^"])locked"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-password_manager_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-password_manager__PasswordManagerEnabled:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-password_manager_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])PasswordManagerEnabled"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-pop-up_windows_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-pop-up_windows_PopupBlocking_Default:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-pop-up_windows_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="PopupBlocking")"PopupBlocking"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Default"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-pop-up_windows_PopupBlocking_Locked:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-pop-up_windows_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="PopupBlocking")"PopupBlocking"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Locked"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-private_browsing_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-private_browsing__DisablePrivateBrowsing:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-private_browsing_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisablePrivateBrowsing"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-search_suggestion_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-search_suggestion__SearchSuggestEnabled:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-search_suggestion_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])SearchSuggestEnabled"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-search_update_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-search_update_Preferences_browser.search.update_Value:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-search_update_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="browser\.search\.update")"browser\.search\.update"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Value"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-search_update_Preferences_browser.search.update_Status:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-search_update_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="browser\.search\.update")"browser\.search\.update"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Status"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-ssl_minimum_version_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-ssl_minimum_version__SSLVersionMin:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-ssl_minimum_version_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])SSLVersionMin"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-sync_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-sync__DisableFirefoxAccounts:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-sync_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableFirefoxAccounts"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-telemetry_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-telemetry__DisableTelemetry:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-telemetry_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?=[^"])DisableTelemetry"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-user_messaging_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-user_messaging_UserMessaging_ExtensionRecommendations:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-user_messaging_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="UserMessaging")"UserMessaging"[\s]*:[\s]*\{[\s\S]*?(?=[^"])ExtensionRecommendations"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <unix:file_object comment="Find all installations of Firefox" id="oval:ssg-obj_firefox_policy-verification_firefox_path:obj:1" version="1">
          <unix:behaviors max_depth="-1" recurse_direction="down" recurse_file_system="all"/>
          <unix:path>/usr</unix:path>
          <unix:filename operation="pattern match">^firefox.sh$|^firefox-bin$</unix:filename>
        </unix:file_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-verification_Preferences_security.default_personal_cert_Value:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-verification_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="security\.default\_personal\_cert")"security\.default\_personal\_cert"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Value"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:textfilecontent54_object id="oval:ssg-obj_firefox_policy-verification_Preferences_security.default_personal_cert_Status:obj:1" version="1">
          <ind:path datatype="string" var_check="at least one" var_ref="oval:ssg-var_firefox_policy-verification_firefox_path:var:1"/>
          <ind:filename datatype="string">policies.json</ind:filename>
          <ind:pattern operation="pattern match">^(?i)\{\s*(?="policies")"policies"[\s]*:[\s]*\{[\s\S]*(?="Preferences")"Preferences"[\s]*:[\s]*\{[\s\S]*?(?="security\.default\_personal\_cert")"security\.default\_personal\_cert"[\s]*:[\s]*\{[\s\S]*?(?=[^"])Status"[\s]*:[\s]*([^,}]+),?\s*</ind:pattern>
          <ind:instance datatype="int">1</ind:instance>
        </ind:textfilecontent54_object>
        <ind:family_object id="oval:ssg-object_unix_family:obj:1" version="1"/>
      </oval-def:objects>
      <oval-def:states>
        <linux:rpminfo_state id="oval:ssg-state_supported_version_of_firefox:ste:1" version="1">
          <linux:evr datatype="evr_string" operation="greater than">68.4.0</linux:evr>
        </linux:rpminfo_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-addons_permission_InstallAddonsPermission_Default:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-autoplay_video_Permissions_Autoplay_Default:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"block-audio-video"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-cryptomining_EnableTrackingProtection_Cryptomining:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-development_tools__DisableDeveloperTools:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-disable_deprecated_ciphers_DisabledCiphers_TLS_RSA_WITH_3DES_EDE_CBC_SHA:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-disable_form_history__DisableFormHistory:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-disable_pocket__DisablePocket:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-disable_studies__DisableFirefoxStudies:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-dns_over_https_DNSOverHTTPS_Enabled:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Enabled:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-encrypted_media_extensions_EncryptedMediaExtensions_Locked:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Value:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"strict"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-enhanced_tracking_Preferences_browser.contentblocking.category_Status:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"locked"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Value:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-extension_recommendation_Preferences_extensions.htmlaboutaddons.recommendations.enabled_Status:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"locked"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-extension_update__ExtensionUpdate:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-feedback_reporting__DisableFeedbackCommands:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-fingerprinting_protection_EnableTrackingProtection_Fingerprinting:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-forget_button__DisableForgetButton:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Value:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-javascript_window_changes_Preferences_dom.disable_window_flip_Status:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"locked"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Value:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-javascript_window_resizing_Preferences_dom.disable_window_move_resize_Status:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"locked"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-network_prediction__NetworkPrediction:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cache:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Cookies:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Downloads:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_FormData:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_History:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Sessions:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_SiteSettings:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_OfflineApps:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-no_sanitize_on_shutdown_SanitizeOnShutdown_Locked:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Search:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_TopSites:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredTopSites:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Pocket:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_SponsoredPocket:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Highlights:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_Snippets:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-nonessential_capabilities_FirefoxHome_locked:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-password_manager__PasswordManagerEnabled:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-pop-up_windows_PopupBlocking_Default:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-pop-up_windows_PopupBlocking_Locked:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-private_browsing__DisablePrivateBrowsing:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-search_suggestion__SearchSuggestEnabled:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-search_update_Preferences_browser.search.update_Value:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-search_update_Preferences_browser.search.update_Status:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"locked"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-ssl_minimum_version__SSLVersionMin:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">tls1\.[23]</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-sync__DisableFirefoxAccounts:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-telemetry__DisableTelemetry:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Tt]rue</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-user_messaging_UserMessaging_ExtensionRecommendations:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">[Ff]alse</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-verification_Preferences_security.default_personal_cert_Value:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"Ask Every Time"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:textfilecontent54_state id="oval:ssg-state_firefox_policy-verification_Preferences_security.default_personal_cert_Status:ste:1" version="1">
          <ind:subexpression datatype="string" entity_check="all" operation="pattern match">"locked"</ind:subexpression>
        </ind:textfilecontent54_state>
        <ind:family_state id="oval:ssg-state_unix_family:ste:1" version="1">
          <ind:family>unix</ind:family>
        </ind:family_state>
      </oval-def:states>
      <oval-def:variables>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-addons_permission_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-addons_permission_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-autoplay_video_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-autoplay_video_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-cryptomining_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-cryptomining_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-development_tools_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-development_tools_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-disable_deprecated_ciphers_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-disable_deprecated_ciphers_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-disable_form_history_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-disable_form_history_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-disable_pocket_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-disable_pocket_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-disable_studies_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-disable_studies_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-dns_over_https_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-dns_over_https_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-encrypted_media_extensions_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-encrypted_media_extensions_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-enhanced_tracking_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-enhanced_tracking_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-extension_recommendation_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-extension_recommendation_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-extension_update_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-extension_update_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-feedback_reporting_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-feedback_reporting_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-fingerprinting_protection_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-fingerprinting_protection_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-forget_button_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-forget_button_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-javascript_window_changes_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-javascript_window_changes_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-javascript_window_resizing_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-javascript_window_resizing_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-network_prediction_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-network_prediction_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-no_sanitize_on_shutdown_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-no_sanitize_on_shutdown_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-nonessential_capabilities_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-nonessential_capabilities_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-password_manager_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-password_manager_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-pop-up_windows_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-pop-up_windows_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-private_browsing_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-private_browsing_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-search_suggestion_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-search_suggestion_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-search_update_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-search_update_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-ssl_minimum_version_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-ssl_minimum_version_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-sync_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-sync_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-telemetry_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-telemetry_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-user_messaging_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-user_messaging_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
        <oval-def:local_variable comment="policies.json path for Firefox." datatype="string" id="oval:ssg-var_firefox_policy-verification_firefox_path:var:1" version="1">
          <oval-def:unique>
            <oval-def:literal_component>/etc/firefox/policies</oval-def:literal_component>
            <oval-def:concat>
              <oval-def:object_component item_field="path" object_ref="oval:ssg-obj_firefox_policy-verification_firefox_path:obj:1"/>
              <oval-def:literal_component>/distribution</oval-def:literal_component>
            </oval-def:concat>
          </oval-def:unique>
        </oval-def:local_variable>
      </oval-def:variables>
    </oval-def:oval_definitions>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-ocil.xml" timestamp="2023-03-07T14:49:38">
    <ocil:ocil>
      <ocil:generator>
        <ocil:product_name>build_shorthand.py from SCAP Security Guide</ocil:product_name>
        <ocil:product_version>ssg: 0.1.66</ocil:product_version>
        <ocil:schema_version>2.0</ocil:schema_version>
        <ocil:timestamp>2023-03-07T14:49:14</ocil:timestamp>
      </ocil:generator>
      <ocil:questionnaires>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-verification_ocil:questionnaire:1">
          <ocil:title>Enable Certificate Verification</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-verification_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-dod_root_certificate_installed_ocil:questionnaire:1">
          <ocil:title>The DoD Root Certificate Exists</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-dod_root_certificate_installed_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-auto-download_actions_ocil:questionnaire:1">
          <ocil:title>Disable auto-download for proscribed MIME types.</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-auto-download_actions_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-telemetry_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Telemetry</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-telemetry_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-autoplay_video_ocil:questionnaire:1">
          <ocil:title>Firefox autoplay must be disabled.</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-autoplay_video_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-development_tools_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Development Tools</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-development_tools_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-fingerprinting_protection_ocil:questionnaire:1">
          <ocil:title>Enabled Firefox Fingerprinting Protection</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-fingerprinting_protection_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-extension_update_ocil:questionnaire:1">
          <ocil:title>Firefox must be configured to not automatically update installed add-ons and plugins.</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-extension_update_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-cryptomining_ocil:questionnaire:1">
          <ocil:title>Enabled Firefox Cryptomining protection</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-cryptomining_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_preferences-enable_ca_trust_ocil:questionnaire:1">
          <ocil:title>Enable Shared System Certificates</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_preferences-enable_ca_trust_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-disable_pocket_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Pocket</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-disable_pocket_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-javascript_window_resizing_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript's Moving Or Resizing Windows Capability</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-javascript_window_resizing_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-search_suggestion_ocil:questionnaire:1">
          <ocil:title>Firefox search suggestions must be disabled.</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-search_suggestion_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-network_prediction_ocil:questionnaire:1">
          <ocil:title>Disable Firefox network prediction</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-network_prediction_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-search_update_ocil:questionnaire:1">
          <ocil:title>Disable Installed Search Plugins Update Checking</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-search_update_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-disable_deprecated_ciphers_ocil:questionnaire:1">
          <ocil:title>Disable Firefox deprecated ciphers</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-disable_deprecated_ciphers_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-extension_recommendation_ocil:questionnaire:1">
          <ocil:title>Disabled Firefox Extension Recommendations</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-extension_recommendation_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-javascript_window_changes_ocil:questionnaire:1">
          <ocil:title>Disable JavaScript's Raise Or Lower Windows Capability</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-javascript_window_changes_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-installed_firefox_version_supported_ocil:questionnaire:1">
          <ocil:title>Supported Version of Firefox Installed</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-installed_firefox_version_supported_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-disable_studies_ocil:questionnaire:1">
          <ocil:title>Disable Firefox Studies</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-disable_studies_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-private_browsing_ocil:questionnaire:1">
          <ocil:title>Firefox private browsing must be disabled.</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-private_browsing_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-enhanced_tracking_ocil:questionnaire:1">
          <ocil:title>Enabled Firefox Enhanced Tracking Protection</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-enhanced_tracking_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-pop-up_windows_ocil:questionnaire:1">
          <ocil:title>Enable Firefox Pop-up Blocker</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-pop-up_windows_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
        <ocil:questionnaire id="ocil:ssg-firefox_policy-forget_button_ocil:questionnaire:1">
          <ocil:title>Firefox must prevent the user from quickly deleting data.</ocil:title>
          <ocil:actions>
            <ocil:test_action_ref>ocil:ssg-firefox_policy-forget_button_action:testaction:1</ocil:test_action_ref>
          </ocil:actions>
        </ocil:questionnaire>
      </ocil:questionnaires>
      <ocil:test_actions>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-verification_action:testaction:1" question_ref="ocil:ssg-firefox_policy-verification_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-dod_root_certificate_installed_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-dod_root_certificate_installed_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-auto-download_actions_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-auto-download_actions_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-telemetry_action:testaction:1" question_ref="ocil:ssg-firefox_policy-telemetry_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-autoplay_video_action:testaction:1" question_ref="ocil:ssg-firefox_policy-autoplay_video_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-development_tools_action:testaction:1" question_ref="ocil:ssg-firefox_policy-development_tools_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-fingerprinting_protection_action:testaction:1" question_ref="ocil:ssg-firefox_policy-fingerprinting_protection_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-extension_update_action:testaction:1" question_ref="ocil:ssg-firefox_policy-extension_update_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-cryptomining_action:testaction:1" question_ref="ocil:ssg-firefox_policy-cryptomining_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_preferences-enable_ca_trust_action:testaction:1" question_ref="ocil:ssg-firefox_preferences-enable_ca_trust_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-disable_pocket_action:testaction:1" question_ref="ocil:ssg-firefox_policy-disable_pocket_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-javascript_window_resizing_action:testaction:1" question_ref="ocil:ssg-firefox_policy-javascript_window_resizing_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-search_suggestion_action:testaction:1" question_ref="ocil:ssg-firefox_policy-search_suggestion_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-network_prediction_action:testaction:1" question_ref="ocil:ssg-firefox_policy-network_prediction_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-search_update_action:testaction:1" question_ref="ocil:ssg-firefox_policy-search_update_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-disable_deprecated_ciphers_action:testaction:1" question_ref="ocil:ssg-firefox_policy-disable_deprecated_ciphers_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-extension_recommendation_action:testaction:1" question_ref="ocil:ssg-firefox_policy-extension_recommendation_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-javascript_window_changes_action:testaction:1" question_ref="ocil:ssg-firefox_policy-javascript_window_changes_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-installed_firefox_version_supported_action:testaction:1" question_ref="ocil:ssg-installed_firefox_version_supported_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-disable_studies_action:testaction:1" question_ref="ocil:ssg-firefox_policy-disable_studies_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-private_browsing_action:testaction:1" question_ref="ocil:ssg-firefox_policy-private_browsing_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-enhanced_tracking_action:testaction:1" question_ref="ocil:ssg-firefox_policy-enhanced_tracking_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-pop-up_windows_action:testaction:1" question_ref="ocil:ssg-firefox_policy-pop-up_windows_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
        <ocil:boolean_question_test_action id="ocil:ssg-firefox_policy-forget_button_action:testaction:1" question_ref="ocil:ssg-firefox_policy-forget_button_question:question:1">
          <ocil:when_true>
            <ocil:result>PASS</ocil:result>
          </ocil:when_true>
          <ocil:when_false>
            <ocil:result>FAIL</ocil:result>
          </ocil:when_false>
        </ocil:boolean_question_test_action>
      </ocil:test_actions>
      <ocil:questions>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-verification_question:question:1">
          <ocil:question_text>To verify that certificate verification is enabled, type the following into the browser address bar:
    about:policies
The output should have the following under security.default_personal_cert:
Value: "Ask Every Time"
Status: "locked"
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-dod_root_certificate_installed_question:question:1">
          <ocil:question_text>To verify that the DoD root certificate is installed,
list all certificates in /etc/pki/ca-trust/source/anchors
and compare them to the DoD root certificate. If there is a match
to the DoD root certificate, then the DoD root certificate is
installed.
      Is it the case that it is not installed?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-auto-download_actions_question:question:1">
          <ocil:question_text>To verify that any proscribed file types are configured for automatic download,
type "about:preferences" into the search bar,  then
type "Applications" in the Find bar in the upper-right corner.
If any of the following file extensions are listed and the Action item associated with it 
is an application that does or can execute the code, this is a finding.
If the entry exists and the "Action" is "Save File" or "Always Ask", this is not a finding.

  HTA
  JSE
  JS
  MOCHA
  SHS
  VBE
  VBS
  SCT
  WSC
  FDF
  XFDF
  LSL
  LSO
  LSS
  IQY
  RQY
  DOS
  BAT
  PS
  EPS
  WCH
  WCM
  WB1
  WB3
  WCH
  WCM
  AD

      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-telemetry_question:question:1">
          <ocil:question_text>To verify that Firefox telemetry is disabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"DisableTelemetry": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-autoplay_video_question:question:1">
          <ocil:question_text>To verify that search suggestions are disabled,
type the following into the browser address bar:
about:policies
The output should have the following under Permissions -&gt; Autoplay:
"Default": "block-audio-video"
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-development_tools_question:question:1">
          <ocil:question_text>To verify that Firefox Development Tools are disabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"DisableDeveloperTools": true,
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-fingerprinting_protection_question:question:1">
          <ocil:question_text>To verify that fingerprinting protection is enabled,
type the following into the browser address bar:
about:policies
The output should have the following under EnableTrackingProtection:
"Fingerprinting": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-extension_update_question:question:1">
          <ocil:question_text>To verify that certificate verification is enabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"ExtensionUpdate": false
Status: "locked"
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-cryptomining_question:question:1">
          <ocil:question_text>To verify that cryptomining protection is enabled,
type the following into the browser address bar:
about:policies
The output should have the following under EnableTrackingProtection:
"Cryptomining": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_preferences-enable_ca_trust_question:question:1">
          <ocil:question_text>To verify that the central system cerificate authority store is enabled,
run the following command:
$ ls -l /etc/alternatives/libnssckbi.so.x86_64
The output should return something similar to:
lrwxrwxrwx. 1 root root 34 Apr 30 09:19 /etc/alternatives/libnssckbi.so.x86_64 -&gt; /usr/lib64/pkcs11/p11-kit-trust.so
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-disable_pocket_question:question:1">
          <ocil:question_text>To verify that Pocket is disabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"DisablePocket": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-javascript_window_resizing_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change windows sizing,
type the following into the browser address bar:
about:policies
The output should have the following uder dom.disable_window_move_resize:
"Value": true,
"Status": "locked",
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-search_suggestion_question:question:1">
          <ocil:question_text>To verify that search suggestions are disabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"SearchSuggestEnabled": false
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-network_prediction_question:question:1">
          <ocil:question_text>To verify that network prediction is disabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"NetworkPrediction": false
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-search_update_question:question:1">
          <ocil:question_text>To verify that checks for installed search plugin updates are disabled,
type the following into the browser address bar:
about:policies
The output should have the following under browser.search.update:
Value: false
Status: "locked"
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-disable_deprecated_ciphers_question:question:1">
          <ocil:question_text>To verify that deprecated ciphers are disabled,
type the following into the browser address bar:
about:policies
The output should have the following under DisabledCiphers:
"TLS_RSA_WITH_3DES_EDE_CBC_SHA": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-extension_recommendation_question:question:1">
          <ocil:question_text>To verify that enhanced tracking protection is enabled,
type the following into the browser address bar:
about:policies
The output should have the following under Preferences -&gt; extensions.htmlaboutaddons.recommendations.enabled:
"Value": false
"Status": "locked"
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-javascript_window_changes_question:question:1">
          <ocil:question_text>To verify that JavaScript cannot change windows sizing,
type the following into the browser address bar:
about:policies
The output should have the following uder dom.disable_window_flip:
"Value": true,
"Status": "locked",
      Is it the case that it is not disabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-installed_firefox_version_supported_question:question:1">
          <ocil:question_text>If the system is joined to the Red Hat Network, a Red Hat Satellite Server, or
a yum server which provides updates, invoking the following command will
indicate if updates are available:
$ sudo yum check-update
If the system is not configured to update from one of these sources,
run the following command to list when each package was last updated:
$ rpm -qa -last
Compare this to Red Hat Security Advisories (RHSA) listed at

    https://access.redhat.com/security/updates/active/
to determine if the system is missing applicable updates.
      Is it the case that it is not updated?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-disable_studies_question:question:1">
          <ocil:question_text>To verify that Studies is disabled,
type the following into the browser address bar:
about:policies
The output should have the following:
"DisableFirefoxStudies": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-private_browsing_question:question:1">
          <ocil:question_text>To verify that private browsing is disabled
type the following into the browser address bar:
about:policies
The output should have the following uder dom.disable_window_move_resize:
"DisablePrivateBrowsing": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-enhanced_tracking_question:question:1">
          <ocil:question_text>To verify that enhanced tracking protection is enabled,
type the following into the browser address bar:
about:policies
The output should have the following under Preferences -&gt; browser.contentblocking.category:
"Value": "strict"
"Status": "locked"
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-pop-up_windows_question:question:1">
          <ocil:question_text>To verify that pop-up blocker is enabled,
run the following command:
$ grep -B10 'PopupBlocking' FIREFOX_INSTALL_DIR/*.cfg
The output should include:
"Default": true
"Locked": true
      Is it the case that it is not enabled?
      </ocil:question_text>
        </ocil:boolean_question>
        <ocil:boolean_question id="ocil:ssg-firefox_policy-forget_button_question:question:1">
          <ocil:question_text>To verify that users cannot access the forget button,
type the following into the browser address bar:
about:policies
The output should have the following:
"DisableForgetButon": true
      Is it the case that ?
      </ocil:question_text>
        </ocil:boolean_question>
      </ocil:questions>
    </ocil:ocil>
  </ds:component>
  <ds:component id="scap_org.open-scap_comp_ssg-firefox-cpe-oval.xml" timestamp="2023-03-07T14:49:39">
    <oval-def:oval_definitions xsi:schemaLocation="http://oval.mitre.org/XMLSchema/oval-common-5 oval-common-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5 oval-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#independent independent-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#unix unix-definitions-schema.xsd         http://oval.mitre.org/XMLSchema/oval-definitions-5#linux linux-definitions-schema.xsd">
      <oval-def:generator>
        <oval:product_name>combine_ovals.py from SCAP Security Guide</oval:product_name>
        <oval:product_version>ssg: [0, 1, 66], python: 2.7.5</oval:product_version>
        <oval:schema_version>5.11</oval:schema_version>
        <oval:timestamp>2023-03-07T14:49:13</oval:timestamp>
      </oval-def:generator>
      <oval-def:definitions>
        <oval-def:definition class="inventory" id="oval:ssg-installed_app_is_firefox:def:1" version="2">
          <oval-def:metadata>
            <oval-def:title>Mozilla Firefox</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:reference ref_id="cpe:/a:mozilla:firefox" source="CPE"/>
            <oval-def:description>The application installed on the system is firefox.</oval-def:description>
          </oval-def:metadata>
          <oval-def:criteria operator="AND">
            <oval-def:extend_definition comment="Installed OS is part of the Unix family" definition_ref="oval:ssg-installed_OS_is_part_of_Unix_family:def:1"/>
            <oval-def:criterion comment="Firefox is installed" test_ref="oval:ssg-test_firefox:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
        <oval-def:definition class="inventory" id="oval:ssg-installed_OS_is_part_of_Unix_family:def:1" version="1">
          <oval-def:metadata>
            <oval-def:title>Installed operating system is part of the Unix family</oval-def:title>
            <oval-def:affected family="unix">
              <oval-def:product>Firefox</oval-def:product>
            </oval-def:affected>
            <oval-def:description>The operating system installed on the system is part of the Unix OS family</oval-def:description>
          </oval-def:metadata>
          <oval-def:criteria>
            <oval-def:criterion comment="Installed operating system is part of the unix family" test_ref="oval:ssg-test_unix_family:tst:1"/>
          </oval-def:criteria>
        </oval-def:definition>
      </oval-def:definitions>
      <oval-def:tests>
        <linux:rpminfo_test check="all" check_existence="at_least_one_exists" comment="Firefox is installed via RPM" id="oval:ssg-test_firefox:tst:1" version="1">
          <linux:object object_ref="oval:ssg-obj_firefox:obj:1"/>
        </linux:rpminfo_test>
        <ind:family_test check="all" check_existence="at_least_one_exists" comment="Test installed OS is part of the unix family" id="oval:ssg-test_unix_family:tst:1" version="1">
          <ind:object object_ref="oval:ssg-object_unix_family:obj:1"/>
          <ind:state state_ref="oval:ssg-state_unix_family:ste:1"/>
        </ind:family_test>
      </oval-def:tests>
      <oval-def:objects>
        <linux:rpminfo_object id="oval:ssg-obj_firefox:obj:1" version="1">
          <linux:name>firefox</linux:name>
        </linux:rpminfo_object>
        <ind:family_object id="oval:ssg-object_unix_family:obj:1" version="1"/>
      </oval-def:objects>
      <oval-def:states>
        <ind:family_state id="oval:ssg-state_unix_family:ste:1" version="1">
          <ind:family>unix</ind:family>
        </ind:family_state>
      </oval-def:states>
    </oval-def:oval_definitions>
  </ds:component>
</ds:data-stream-collection>
